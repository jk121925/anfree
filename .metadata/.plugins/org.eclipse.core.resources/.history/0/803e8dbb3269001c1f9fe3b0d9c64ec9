package dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.*;

import vo.Member;

public class MemberDao {
	Connection connection;

	public void setConnection(Connection connection) {
		this.connection = connection;
	}
	
	public List<Member> selectList() throws Exception{
		Statement stmt =null;
		ResultSet rs = null;
		
		try {
			stmt = connection.createStatement();
			rs = stmt.executeQuery("SELECT MNO,MNAME,EMAIL,CRE_DATE FROM MEMBERS ORDER BY MNO ASC");
		
			ArrayList<Member> members = new ArrayList<Member>();
			
			while(rs.next()) {
				members.add(new Member().setNo(rs.getInt("MNO")).setName(rs.getString("MNAME")).setEmail(rs.getString("EMAIL")).setCreatedDate(rs.getDate("CRE_DATE")));
				
			}
			return members;
			
		}catch(Exception e){
			try {if(rs!=null) rs.close();}catch(Exception rsE) {}
			try {if(stmt!=null) stmt.close();}catch(Exception stmtE) {}
			throw e;
		}
		
		
	}
	
	public int insert(Member member) throws Exception{
		PreparedStatement stmt = null;
		int ret =1;
		try {
			stmt = connection.prepareStatement("INSERT INTO MEMBERS(EMAIL,PWD,MNAME,CRE_DATE,MOD_DATE) VALUES(?,?,?,NOW(),NOW())");
			stmt.setString(1, member.getEmail());
			stmt.setString(2, member.getPassword());
			stmt.setString(3, member.getName());
			return stmt.executeUpdate();
		}catch(Exception e) {
			try{if(stmt!=null) stmt.close();}catch(Exception stmtE) {};
		}
		return ret;
	}
	
	public int delete(int no) throws Exception{
		int ret = 1;
		PreparedStatement stmt = null;
		
		try {
			stmt = connection.prepareStatement("DELETE FROM MEMBERS WHERE MNO=?");
			stmt.setInt(1, no);
			return stmt.executeUpdate();
			
			
			
		}catch(Exception e) {
			try {if(stmt!=null) stmt.close();}catch(Exception stmtE) {}
		
		return ret;
		}
	
	
	}
	
	public Member selectOne(int no) throws Exception{
		Statement stmt = null;
		ResultSet rs = null;
		Member member = new Member();
		
		try {
			stmt = connection.createStatement();
			rs = stmt.executeQuery("SELECT MNO,EMAIL,MNAME,CRE_DATE FROM MEMBERS WHERE MNO=" + no);
			
			if(rs.next()) {
				member.setCreatedDate(rs.getDate("CRE_DATE")).setEmail(rs.getString("EMAIL")).setName(rs.getString("MNAME")).setNo(no);
				
			}
			return member;
			
			
		}catch(Exception e) {
			try {if(stmt!=null) stmt.close();}catch(Exception stmtE) {}
			return null;
		}
		
		
	}//end selectOne
	
	public int update(Member member) throws Exception {
		PreparedStatement stmt= null;
		
		try {
			stmt = connection.prepareStatement("UPDATE MEMBERS SET EMAIL=?,MNAME=?,MOD_DATE=NOW() WHERE MNO=?");
			stmt.setString(1, member.getEmail());
			stmt.setString(2, member.getName());
			stmt.setInt(3, member.getNo());
			
			return stmt.executeUpdate();
			
			
			
		}catch(Exception e) {
			try {if(stmt!=null)stmt.close();}catch(Exception stmtE) {}
			return 0;
		}
		
	}
	
	public Member exist(String email, String password) throws Exception {
		Member member = new Member();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = connection.prepareStatement("SELECT MNAME,EMAIL FROM MEMBERS WHERE EMAIL=? AND PWD=?");
			stmt.setString(1, email);
			stmt.setString(2, password);
			rs = stmt.executeQuery();
			if(rs.next()) {
				member.setName(rs.getString("MNAME")).setEmail(rs.getString("EMAIL"));
				System.out.println(member.getEmail());
			}else {
				member=null;
			}
			return member;
		}catch(Exception e) {
			try {if(stmt!=null) stmt.close();}catch(Exception stmtE) {}
			if(member!=null) member=null;
			return member;
		}
		
		
		
	}
	
	
	
	
	
}
