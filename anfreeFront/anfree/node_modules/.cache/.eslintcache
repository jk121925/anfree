[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiv.js":"10"},{"size":504,"mtime":1648454521278,"results":"11","hashOfConfig":"12"},{"size":1586,"mtime":1648462063451,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1648271251510,"results":"14","hashOfConfig":"12"},{"size":1003,"mtime":1649145197118,"results":"15","hashOfConfig":"12"},{"size":293,"mtime":1648974051304,"results":"16","hashOfConfig":"12"},{"size":402,"mtime":1648974053648,"results":"17","hashOfConfig":"12"},{"size":876,"mtime":1649052762862,"results":"18","hashOfConfig":"12"},{"size":5196,"mtime":1649145270848,"results":"19","hashOfConfig":"12"},{"size":1549,"mtime":1649145232983,"results":"20","hashOfConfig":"12"},{"size":3506,"mtime":1649145612522,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["57","58"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js",[],[],["59","60"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js",[],[],["61","62"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js",["63","64","65","66"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component} from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        this.actionMode = 'writeMode';\n        this.writeContentMode = 'todoList';\n        this.currentSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentSelector];\n        updateContentsList[this.currentSelector] = updateContentsList[this.currentSelector+upDownInt];\n        updateContentsList[this.currentSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown' && this.currentSelector!=this.props._contents.length-1){\n                    console.log(this.currentSelector)\n                    this.swapContents('down');\n                }else if(_pressArrowDirection==='ArrowUp' && this.currentSelector !=0){\n                    this.swapContents('up');\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else this.writeContentMode = 'todoList';\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.props._contents.length ===1){\n                    _deleteContents = []\n                    this.currentSelector = this.currentSelector-1;\n                    this.mode = 'writeMode'\n                }\n                else if(this.props._contents.length !==0){\n                    for(var i=this.currentSelector; i<_deleteContents.length-1; i++){\n                        _deleteContents[i] = _deleteContents[i+1];\n                    }\n                    _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                    if(this.currentSelector === this.props._contents.length-1){\n                        this.currentSelector = this.currentSelector-1;\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown'){\n                    if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                        this.currentSelector = 0;\n                        this.actionMode = 'selectorMode'\n                    }else if(this.actionMode === 'selectorMode'){\n                        this.currentSelector = (this.currentSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentSelector+1;                        \n                    }\n                }else if(_pressArrowDirection === 'ArrowUp'){\n                    if(this.actionMode === 'selectorMode'){\n                        if(this.currentSelector === 0){\n                            this.actionMode ='writeMode'\n                        }else{\n                            this.currentSelector = (this.currentSelector === 0)? 0 : this.currentSelector-1;\n                        }\n                    }\n                }\n                console.log(this.props._contents);\n                this.forceUpdate();\n            }//end arrow if test\n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <TodoMemoDivRender \n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentSelector = {this.currentSelector}\n            _writeContentMode = {this.writeContentMode}\n            ></TodoMemoDivRender>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js",["67","68"],[],"import React, {Component} from \"react\";\n\n// class MemoInput extends Component{\n//     constructor(props){\n//         super(props);\n//     }\n//     render(){\n//         return(\n//             <input\n//                 type = 'text'\n//                 placeholder=\"add Memo!\"\n//                 onKeyDown={function(e){\n//                     // console.log(e);\n//                     if(e.nativeEvent.key === 'Enter'){\n//                         e.preventDefault();\n//                         var addMemo = this.props._memoContents;\n//                         addMemo.memoList.push(e.target.value);\n//                         // console.log(addMemo);\n//                         this.props.callUpperUpdateFunc(addMemo);\n//                         e.target.value = \"\";\n//                     }\n//                 }.bind(this)}\n//             >\n//             </input>\n//         )\n//     }\n// }\n\n\nfunction MemoInput({_memoContents,_memoIdx,_setterContents}){\n    console.log(_memoContents,_memoIdx,_setterContents);\n    return(\n        <input\n        type = 'text'\n            placeholder=\"add Memo!\"\n            onKeyDown={function(e){\n                if(e.nativeEvent.key === 'Enter'){\n                    e.preventDefault();\n                    var resetMemo = Array.from(_memoContents);\n                    resetMemo[_memoIdx].memolist.push(e.target.value);\n                    _setterContents(resetMemo);\n                    e.target.value=\"\"\n                }\n            }.bind(this)}\n        >\n        </input>\n    );\n};\nexport default MemoInput","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiv.js",["69","70","71","72","73"],[],"import React ,{useState}from \"react\";\nimport MemoInput from \"./MemoInput\";\nimport \"./TodoElement.css\"\n\n\n\nfunction MemoDiv({memoElement,todoElement}){\n    var memoKey = todoElement + \"-\" + memoElement;\n    return(\n        <div className=\"memoElement\" key ={memoKey}>\n            {memoElement}\n        </div>\n    )\n};\n\n\nfunction TodoMemoDivRender({_contents,_mode,_currentSelector,_writeContentMode}){\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n    console.log(\"after memo = \" ,_contents);\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    console.log(_contents,_mode,_currentSelector,_writeContentMode);\n\n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentSelector!==-1 && i===_currentSelector){\n                if(_writeContentMode ==='memoList'){\n                    console.log('memoList');\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist + \"\" +i}>\n                            {renderContainer[i].todolist}\n                            <div className=\"memoInput\">\n                                <MemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentSelector}\n                                    _setterContents = {setAfterContents}\n                                ></MemoInput>\n                                {renderContainer[i].memolist.map(memoElement=>(\n                                    <MemoDiv memoElement={memoElement} todoElement={renderContainer[i].todolist}/>\n                                ))}\n                            </div>\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist + \"\" +i}>\n                            {renderContainer[i].todolist}\n                            <div className=\"memoInput\">\n                                {renderContainer[i].memolist.map(memoElement=>(\n                                    <MemoDiv memoElement={memoElement} todoElement={renderContainer[i].todolist}/>\n                                ))}\n                            </div>\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {renderContainer[i].memolist.map(memoElement=>(\n                            <MemoDiv memoElement={memoElement} todoElement={renderContainer[i].todolist}/>\n                        ))}\n                    </div>\n                );\n            }\n            i=i+1;\n        }\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {renderContainer[i].memolist.map(memoElement=>(\n                    <MemoDiv memoElement={memoElement} todoElement={renderContainer[i].todolist}/>\n                ))}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDivRender;",{"ruleId":"74","severity":1,"message":"75","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":35},{"ruleId":"78","severity":1,"message":"79","line":59,"column":9,"nodeType":"80","messageId":"81","endLine":59,"endColumn":22},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"74","severity":1,"message":"88","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":37,"column":80,"nodeType":"91","messageId":"92","endLine":37,"endColumn":82},{"ruleId":"89","severity":1,"message":"90","line":40,"column":83,"nodeType":"91","messageId":"92","endLine":40,"endColumn":85},{"ruleId":"93","severity":1,"message":"94","line":85,"column":21,"nodeType":"76","messageId":"95","endLine":85,"endColumn":41},{"ruleId":"74","severity":1,"message":"96","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"98","line":44,"column":15,"nodeType":"99","messageId":"92","endLine":44,"endColumn":19,"fix":"100"},{"ruleId":"74","severity":1,"message":"101","line":18,"column":12,"nodeType":"76","messageId":"77","endLine":18,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":44,"column":66,"nodeType":"104","messageId":"105","endLine":46,"endColumn":34},{"ruleId":"102","severity":1,"message":"103","line":55,"column":66,"nodeType":"104","messageId":"105","endLine":57,"endColumn":34},{"ruleId":"102","severity":1,"message":"103","line":66,"column":58,"nodeType":"104","messageId":"105","endLine":68,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":79,"column":50,"nodeType":"104","messageId":"105","endLine":81,"endColumn":18},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["106"],"no-negated-in-lhs",["107"],["106"],["107"],"'render' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'_pressArrowDirection' is already defined.","redeclared","'Component' is defined but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"108","text":"109"},"'preContents' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",[1475,1486],""]