[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivEnter.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js":"10","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js":"11","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js":"12","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js":"13"},{"size":504,"mtime":1648454521278,"results":"14","hashOfConfig":"15"},{"size":1350,"mtime":1652079689935,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1648271251510,"results":"17","hashOfConfig":"15"},{"size":1013,"mtime":1652079178468,"results":"18","hashOfConfig":"15"},{"size":904,"mtime":1652110947926,"results":"19","hashOfConfig":"15"},{"size":2316,"mtime":1652104064942,"results":"20","hashOfConfig":"15"},{"size":3045,"mtime":1652114216880,"results":"21","hashOfConfig":"15"},{"size":679,"mtime":1652079239549,"results":"22","hashOfConfig":"15"},{"size":408,"mtime":1652079530744,"results":"23","hashOfConfig":"15"},{"size":299,"mtime":1652079510517,"results":"24","hashOfConfig":"15"},{"size":3920,"mtime":1652114190753,"results":"25","hashOfConfig":"15"},{"size":12084,"mtime":1652114168075,"results":"26","hashOfConfig":"15"},{"size":9061,"mtime":1652104292238,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["75"],[],"import React, {Component, useState} from 'react';\nimport './App.css';\nimport AppClockCheckNow from './TodoList/AppClockCheckNow.js';\nimport AppTodolist from './TodoList/AppTodolist.js'\nimport AppWelcome from './TodoList/AppWelcome.js'\n\nclass History_nav extends Component{\n  \n  render(){\n    return(\n      <nav>\n        <div>LOGIN</div>\n        <div>CALENDER</div>\n        <div>STATICS</div>\n      </nav>\n    );\n  }\n}\n\n\n\n\n\n\n\n\nfunction App() {\n  const stageState = [\"EnterTodo\",\"FilterTodo\",\"EraseTodo\"];\n  const [prevStage,nextStage] = useState(0);\n  \n  \n  const stageChange =(stageNum)=>{\n    nextStage(stageNum);\n  }\n\n  const setStageAppClassName = (prevStage)=>{\n    let nowStageClassName;\n    if(prevStage === 0){\n      nowStageClassName = 'App-EnterTodo';\n    }else if(prevStage === 1){\n      nowStageClassName = 'App-FilterTodo';\n    }else{\n      nowStageClassName = 'App-EraseTodo';\n    }\n    return nowStageClassName;\n  }\n\n\n\n  // console.log(prevStage);\n  return (\n    <div className='App'>\n      <header className={setStageAppClassName(prevStage)}>\n        <History_nav></History_nav>\n        <AppWelcome ></AppWelcome>\n        <AppClockCheckNow></AppClockCheckNow>\n        <AppTodolist\n          _stageState = {stageState}\n          stageChange = {stageChange}\n        ></AppTodolist>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["76","77"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js",["78","79"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\"\nconst Modal = (props) => {  \n    const {_modalState,_header, closeModal} = props;\n    \n    \n\n\n\n    return (\n      // 모달이 열릴때 openModal 클래스가 생성된다.\n      <div className={ _modalState ? 'openModal modal' : 'modal'}>\n        {_modalState ? (\n          <section>\n            <header>\n              {_header}\n              <button onClick={closeModal} className=\"close\">\n                &times;\n              </button>\n            </header>\n            <main>{props.children}</main>\n            <footer>\n                <button className={_modalState ? 'next' : 'prev'} onClick={closeModal}>\n                    {_modalState ?\n                    (\n                        <div>next</div>\n                    ) : (\n                        <div>prev</div>\n                    )}\n\n                </button>\n            </footer>\n          </section>\n        ) : null}\n      </div>\n    );\n  };\n\n  \n  export default Modal;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js",[],[],["80","81"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js",["82","83"],[],"import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementFilter.css\"\n\nfunction RenderTodoMemoDiveFilter({_mode,_currentTodoSelector,_currentMemoSelector,_filterTodoCursorListCnt,_filterTodoCursorList}){\n    // const [preContents, AfterContents] = useState(_contents);\n    let filteredList =[];\n    console.log(_currentTodoSelector,_filterTodoCursorListCnt);\n    // const setAfterContents =(update)=>{\n    //     AfterContents(update);\n    // }\n\n    // make memo <div> list\n    // 메모 리스트를 만드는 component\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    // __i => 0 - willNotDoList,1 - readyList ,2 - willDoList\n    const makeFilterdTodoDivList =(__i,__filteredList,__filterTodoCursorListCnt,__currentTodoSelector,__currentMemoSelector)=>{\n        let tempArr =[]; let i=0;\n        let setClassName = (__i === 0) ? \"willNotDo\" : ((__i === 1) ? \"ready\" : \"willDo\");\n\n        while(i<__filteredList[__i].length){\n            \n            tempArr.push(\n                <div className={(__i === __filterTodoCursorListCnt && i === __currentTodoSelector) ? setClassName + \"-now\" : setClassName} key={__filteredList[__i][i].todolist}>\n                    {__filteredList[__i][i].todolist}\n                    {makeMemoDivList(__filteredList[__i][i].memolist,__currentMemoSelector)}\n                </div>\n            )\n            i = i+1;\n        }\n        return tempArr;\n    }\n\n\n    var i=0;\n    for( i = 0; i<3; i++){\n        filteredList.push(makeFilterdTodoDivList(i,_filterTodoCursorList,_filterTodoCursorListCnt,_currentTodoSelector,_currentMemoSelector));\n    }\n    \n    return(\n        <div className=\"filterDiv\">\n            <div className=\"willNotDoListDiv\">\n                {filteredList[0]}\n            </div>\n            <div className=\"readyDiv\">\n                {filteredList[1]}\n            </div>\n            <div className=\"willDoListDiv\">\n                {filteredList[2]}\n            </div>\n        </div>\n    );\n};\n\nexport default RenderTodoMemoDiveFilter; ",["84","85"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivEnter.js",["86"],[],"import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementEnter.css\"\n\nfunction TodoMemoDivEnter({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                if(_writeContentMode ==='memoList'){\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n                                <RenderMemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentTodoSelector}\n                                    _setterContents = {setAfterContents}\n                                ></RenderMemoInput> \n                            </div>\n                            {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            {makeMemoDivList(renderContainer[i].memolist,-1)}\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDivEnter; ","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js",["87"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js",["88","89","90","91","92","93","94","95"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.currentListIndex = 1;\n        // filterTodo cursor\n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    \n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        console.log(updateFunction);\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n            /*\n                위아래로 swap하는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[1].length-1){\n                            this.swapTodoContents('down',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        if(_deleteContents[1][this.currentTodoSelector].memolist.lengt!==0){\n                            _deleteContents = this.deleteMemoContents(1,this.currentTodoSelector,this.currentMemoSelector,_deleteContents);\n                            if(this.currentMemoSelector=== _deleteContents[1][this.currentTodoSelector].memolist.lengt-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(_deleteContents.length ===1){\n                            _deleteContents[1] = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(_deleteContents.length !==0){\n                            _deleteContents = this.deleteTodoContents(1,this.currentTodoSelector,_deleteContents);\n                            if(this.currentTodoSelector === _deleteContents[1].length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    위아래로 커서 변경하는 상황\n                    ************************* need refactorying **********************\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents[1].length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[1].length-1)? this.props._contents[1].length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n            }\n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivEnter\n                        _contents={this.props._contents[1]}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></RenderTodoMemoDivEnter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js",["96","97","98","99","100","101","102","103","104"],[],{"ruleId":"105","severity":1,"message":"106","line":54,"column":9,"nodeType":"107","messageId":"108","endLine":54,"endColumn":22},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"117","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"109","replacedBy":"118"},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","severity":1,"message":"117","line":1,"column":16,"nodeType":"115","messageId":"116","endLine":1,"endColumn":24},{"ruleId":"113","severity":1,"message":"120","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},{"ruleId":"109","replacedBy":"121"},{"ruleId":"111","replacedBy":"122"},{"ruleId":"113","severity":1,"message":"123","line":7,"column":12,"nodeType":"115","messageId":"116","endLine":7,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":17,"column":15,"nodeType":"126","messageId":"127","endLine":17,"endColumn":19,"fix":"128"},{"ruleId":"113","severity":1,"message":"129","line":1,"column":10,"nodeType":"115","messageId":"116","endLine":1,"endColumn":16},{"ruleId":"113","severity":1,"message":"130","line":2,"column":27,"nodeType":"115","messageId":"116","endLine":2,"endColumn":31},{"ruleId":"113","severity":1,"message":"131","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":32},{"ruleId":"132","severity":1,"message":"133","line":108,"column":92,"nodeType":"134","messageId":"127","endLine":108,"endColumn":94},{"ruleId":"132","severity":1,"message":"133","line":110,"column":95,"nodeType":"134","messageId":"127","endLine":110,"endColumn":97},{"ruleId":"132","severity":1,"message":"133","line":114,"column":92,"nodeType":"134","messageId":"127","endLine":114,"endColumn":94},{"ruleId":"132","severity":1,"message":"133","line":116,"column":95,"nodeType":"134","messageId":"127","endLine":116,"endColumn":97},{"ruleId":"135","severity":1,"message":"136","line":173,"column":25,"nodeType":"115","messageId":"137","endLine":173,"endColumn":45},{"ruleId":"113","severity":1,"message":"129","line":1,"column":10,"nodeType":"115","messageId":"116","endLine":1,"endColumn":16},{"ruleId":"113","severity":1,"message":"130","line":2,"column":27,"nodeType":"115","messageId":"116","endLine":2,"endColumn":31},{"ruleId":"132","severity":1,"message":"138","line":84,"column":90,"nodeType":"134","messageId":"127","endLine":84,"endColumn":92},{"ruleId":"132","severity":1,"message":"138","line":88,"column":90,"nodeType":"134","messageId":"127","endLine":88,"endColumn":92},{"ruleId":"135","severity":1,"message":"136","line":97,"column":25,"nodeType":"115","messageId":"137","endLine":97,"endColumn":45},{"ruleId":"132","severity":1,"message":"133","line":101,"column":92,"nodeType":"134","messageId":"127","endLine":101,"endColumn":94},{"ruleId":"132","severity":1,"message":"133","line":103,"column":95,"nodeType":"134","messageId":"127","endLine":103,"endColumn":97},{"ruleId":"132","severity":1,"message":"133","line":107,"column":92,"nodeType":"134","messageId":"127","endLine":107,"endColumn":94},{"ruleId":"132","severity":1,"message":"133","line":109,"column":95,"nodeType":"134","messageId":"127","endLine":109,"endColumn":97},"react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["139"],["140"],"'RenderMemoInput' is defined but never used.",["139"],["140"],"'preContents' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"141","text":"142"},"'render' is defined but never used.","'memo' is defined but never used.","'RenderTodoMemoDiveFilter' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-redeclare","'_pressArrowDirection' is already defined.","redeclared","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",[599,610],""]