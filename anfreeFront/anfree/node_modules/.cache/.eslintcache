[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivEnter.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js":"10","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js":"11","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js":"12","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js":"13"},{"size":504,"mtime":1648454521278,"results":"14","hashOfConfig":"15"},{"size":1350,"mtime":1652079689935,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1648271251510,"results":"17","hashOfConfig":"15"},{"size":1013,"mtime":1652079178468,"results":"18","hashOfConfig":"15"},{"size":901,"mtime":1652079402422,"results":"19","hashOfConfig":"15"},{"size":2316,"mtime":1652104064942,"results":"20","hashOfConfig":"15"},{"size":3045,"mtime":1652079333324,"results":"21","hashOfConfig":"15"},{"size":679,"mtime":1652079239549,"results":"22","hashOfConfig":"15"},{"size":408,"mtime":1652079530744,"results":"23","hashOfConfig":"15"},{"size":299,"mtime":1652079510517,"results":"24","hashOfConfig":"15"},{"size":3912,"mtime":1652104981641,"results":"25","hashOfConfig":"15"},{"size":12290,"mtime":1652083220223,"results":"26","hashOfConfig":"15"},{"size":9061,"mtime":1652104292238,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["74"],[],"import React, {Component, useState} from 'react';\nimport './App.css';\nimport AppClockCheckNow from './TodoList/AppClockCheckNow.js';\nimport AppTodolist from './TodoList/AppTodolist.js'\nimport AppWelcome from './TodoList/AppWelcome.js'\n\nclass History_nav extends Component{\n  \n  render(){\n    return(\n      <nav>\n        <div>LOGIN</div>\n        <div>CALENDER</div>\n        <div>STATICS</div>\n      </nav>\n    );\n  }\n}\n\n\n\n\n\n\n\n\nfunction App() {\n  const stageState = [\"EnterTodo\",\"FilterTodo\",\"EraseTodo\"];\n  const [prevStage,nextStage] = useState(0);\n  \n  \n  const stageChange =(stageNum)=>{\n    nextStage(stageNum);\n  }\n\n  const setStageAppClassName = (prevStage)=>{\n    let nowStageClassName;\n    if(prevStage === 0){\n      nowStageClassName = 'App-EnterTodo';\n    }else if(prevStage === 1){\n      nowStageClassName = 'App-FilterTodo';\n    }else{\n      nowStageClassName = 'App-EraseTodo';\n    }\n    return nowStageClassName;\n  }\n\n\n\n  // console.log(prevStage);\n  return (\n    <div className='App'>\n      <header className={setStageAppClassName(prevStage)}>\n        <History_nav></History_nav>\n        <AppWelcome ></AppWelcome>\n        <AppClockCheckNow></AppClockCheckNow>\n        <AppTodolist\n          _stageState = {stageState}\n          stageChange = {stageChange}\n        ></AppTodolist>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["75","76"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js",["77","78"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\"\nconst Modal = (props) => {  \n    const {_modalState,_header, closeModal} = props;\n    \n    \n\n\n\n    return (\n      // 모달이 열릴때 openModal 클래스가 생성된다.\n      <div className={ _modalState ? 'openModal modal' : 'modal'}>\n        {_modalState ? (\n          <section>\n            <header>\n              {_header}\n              <button onClick={closeModal} className=\"close\">\n                &times;\n              </button>\n            </header>\n            <main>{props.children}</main>\n            <footer>\n                <button className={_modalState ? 'next' : 'prev'} onClick={closeModal}>\n                    {_modalState ?\n                    (\n                        <div>next</div>\n                    ) : (\n                        <div>prev</div>\n                    )}\n\n                </button>\n            </footer>\n          </section>\n        ) : null}\n      </div>\n    );\n  };\n\n  \n  export default Modal;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js",["79","80"],[],"import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementFilter.css\"\n\nfunction RenderTodoMemoDiveFilter({_mode,_currentTodoSelector,_currentMemoSelector,_filterTodoCursorListCnt,_filterTodoCursorList}){\n    // const [preContents, AfterContents] = useState(_contents);\n    let filteredList =[];\n    console.log(_currentTodoSelector,_filterTodoCursorListCnt);\n    // const setAfterContents =(update)=>{\n    //     AfterContents(update);\n    // }\n\n    // make memo <div> list\n    // 메모 리스트를 만드는 component\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    // __i => 0 - willNotDoList,1 - readyList ,2 - willDoList\n    const makeFilterdTodoDivList =(__i,__filteredList,__filterTodoCursorListCnt,__currentTodoSelector,__currentMemoSelector)=>{\n        let tempArr =[]; let i=0;\n        let setClassName = (__i === 0) ? \"willNotDo\" : ((__i === 1) ? \"ready\" : \"willDo\");\n\n        while(i<__filteredList[__i].length){\n            \n            tempArr.push(\n                <div className={(__i === __filterTodoCursorListCnt && i === __currentTodoSelector) ? setClassName + \"-now\" : setClassName} key={__filteredList[__i][i].todolist}>\n                    {__filteredList[__i][i].todolist}\n                    {makeMemoDivList(__filteredList[__i][i].memolist,__currentMemoSelector)}\n                </div>\n            )\n            i = i+1;\n        }\n        return tempArr;\n    }\n\n\n    var i=0;\n    for( i = 0; i<3; i++){\n        filteredList.push(makeFilterdTodoDivList(i,_filterTodoCursorList,_filterTodoCursorListCnt,_currentTodoSelector,_currentMemoSelector));\n    }\n    \n    return(\n        <div className=\"filterDiv\">\n            <div className=\"willNotDoListDiv\">\n                {filteredList[0]}\n            </div>\n            <div className=\"readyDiv\">\n                {filteredList[1]}\n            </div>\n            <div className=\"willDoListDiv\">\n                {filteredList[2]}\n            </div>\n        </div>\n    );\n};\n\nexport default RenderTodoMemoDiveFilter; ",["81","82"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivEnter.js",["83"],[],"import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementEnter.css\"\n\nfunction TodoMemoDivEnter({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                if(_writeContentMode ==='memoList'){\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n                                <RenderMemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentTodoSelector}\n                                    _setterContents = {setAfterContents}\n                                ></RenderMemoInput> \n                            </div>\n                            {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            {makeMemoDivList(renderContainer[i].memolist,-1)}\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDivEnter; ","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js",["84"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js",["85","86","87","88","89","90","91","92"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        // filterTodo cursor\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                        if( memolength!==0){\n                            for(var i = this.currentMemoSelector; i<memo-1; i++){\n                                _deleteContents[this.currentTodoSelector].memolist[i] = \n                                _deleteContents[this.currentTodoSelector].memolist[i+1]\n                            }\n                            _deleteContents[this.currentTodoSelector].memolist=\n                            _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                            if(this.currentMemoSelector=== memolength-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(this.props._contents.length ===1){\n                            _deleteContents = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(this.props._contents.length !==0){\n                            for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                                _deleteContents[i] = _deleteContents[i+1];\n                            }\n                            _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                            if(this.currentTodoSelector === this.props._contents.length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    selectorMode면 움직이고 있는 중입니다.\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n                /**\n                 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                 * Second stage -> filterTodo 일 때  동작하는 로직\n                 * RenderTodoList가 복잡해 지지만 한곳에서 관리하는게 더 나을 수 있다는 생각을 해봅니다.\n                 * 후에 따로 빼서 관리하는 방법이 필요 할 수 있습니다.\n                 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                 */\n            }\n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivEnter\n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></RenderTodoMemoDivEnter>\n            </div>\n           \n        //    <div className={(this.props._stage==='EnterTodo') ? 'EnterTodo': ((this.props._stage === 'FilterTodo') ? \"FilterTodo\" : \"EraseTodo\") }>\n        //         {\n        //             (this.props._stage === 'EnterTodo') ? (\n        //                 <RenderTodoMemoDivEnter\n        //                 _contents={this.props._contents}\n        //                 _mode = {this.actionMode}\n        //                 _currentTodoSelector = {this.currentTodoSelector}\n        //                 _currentMemoSelector = {this.currentMemoSelector}\n        //                 _writeContentMode = {this.writeContentMode}\n        //                 ></RenderTodoMemoDivEnter>\n        //             ) : (\n        //                 (this.props._stage==='FilterTodo') ? \n        //             (\n        //                 <div className=\"todoMemoDiv\">\n        //                     <div className=\"FilterTodoContainer\">\n        //                     <RenderTodoMemoDiveFilter\n        //                     _contents={this.props._contents}\n        //                     _mode = {this.actionMode}\n        //                     _currentTodoSelector = {this.currentTodoSelector}\n        //                     _currentMemoSelector = {this.currentMemoSelector}\n        //                     _writeContentMode = {this.writeContentMode}\n        //                     _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n        //                     _filterTodoInnerCursor = {this.filterTodoInnerCursor}\n        //                     ></RenderTodoMemoDiveFilter>\n        //                     </div>\n        //                 </div>\n        //             ):(\n        //                 <RenderTodoMemoDivEnter  \n        //                 _contents={this.props._contents}\n        //                 _mode = {this.actionMode}\n        //                 _currentTodoSelector = {this.currentTodoSelector}\n        //                 _currentMemoSelector = {this.currentMemoSelector}\n        //                 _writeContentMode = {this.writeContentMode}\n        //                 ></RenderTodoMemoDivEnter>\n        //                 )\n        //             ) \n        //         }\n        //     </div>\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js",["93","94","95","96","97","98","99","100","101"],[],{"ruleId":"102","severity":1,"message":"103","line":54,"column":9,"nodeType":"104","messageId":"105","endLine":54,"endColumn":22},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":1,"column":28,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"114","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":24},{"ruleId":"110","severity":1,"message":"115","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":23},{"ruleId":"106","replacedBy":"116"},{"ruleId":"108","replacedBy":"117"},{"ruleId":"110","severity":1,"message":"118","line":7,"column":12,"nodeType":"112","messageId":"113","endLine":7,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":17,"column":15,"nodeType":"121","messageId":"122","endLine":17,"endColumn":19,"fix":"123"},{"ruleId":"110","severity":1,"message":"124","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":16},{"ruleId":"110","severity":1,"message":"125","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":32},{"ruleId":"126","severity":1,"message":"127","line":56,"column":92,"nodeType":"128","messageId":"122","endLine":56,"endColumn":94},{"ruleId":"126","severity":1,"message":"127","line":58,"column":95,"nodeType":"128","messageId":"122","endLine":58,"endColumn":97},{"ruleId":"126","severity":1,"message":"127","line":62,"column":92,"nodeType":"128","messageId":"122","endLine":62,"endColumn":94},{"ruleId":"126","severity":1,"message":"127","line":64,"column":95,"nodeType":"128","messageId":"122","endLine":64,"endColumn":97},{"ruleId":"129","severity":1,"message":"130","line":113,"column":37,"nodeType":"112","messageId":"131","endLine":113,"endColumn":38},{"ruleId":"129","severity":1,"message":"132","line":129,"column":25,"nodeType":"112","messageId":"131","endLine":129,"endColumn":45},{"ruleId":"110","severity":1,"message":"124","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":16},{"ruleId":"110","severity":1,"message":"133","line":2,"column":27,"nodeType":"112","messageId":"113","endLine":2,"endColumn":31},{"ruleId":"126","severity":1,"message":"134","line":84,"column":90,"nodeType":"128","messageId":"122","endLine":84,"endColumn":92},{"ruleId":"126","severity":1,"message":"134","line":88,"column":90,"nodeType":"128","messageId":"122","endLine":88,"endColumn":92},{"ruleId":"129","severity":1,"message":"132","line":97,"column":25,"nodeType":"112","messageId":"131","endLine":97,"endColumn":45},{"ruleId":"126","severity":1,"message":"127","line":101,"column":92,"nodeType":"128","messageId":"122","endLine":101,"endColumn":94},{"ruleId":"126","severity":1,"message":"127","line":103,"column":95,"nodeType":"128","messageId":"122","endLine":103,"endColumn":97},{"ruleId":"126","severity":1,"message":"127","line":107,"column":92,"nodeType":"128","messageId":"122","endLine":107,"endColumn":94},{"ruleId":"126","severity":1,"message":"127","line":109,"column":95,"nodeType":"128","messageId":"122","endLine":109,"endColumn":97},"react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'RenderMemoInput' is defined but never used.",["135"],["136"],"'preContents' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"137","text":"138"},"'render' is defined but never used.","'RenderTodoMemoDiveFilter' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-redeclare","'i' is already defined.","redeclared","'_pressArrowDirection' is already defined.","'memo' is defined but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",[599,610],""]