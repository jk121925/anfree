[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiv.js":"10"},{"size":504,"mtime":1648454521278,"results":"11","hashOfConfig":"12"},{"size":1586,"mtime":1648462063451,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1648271251510,"results":"14","hashOfConfig":"12"},{"size":1003,"mtime":1649321768389,"results":"15","hashOfConfig":"12"},{"size":293,"mtime":1648974051304,"results":"16","hashOfConfig":"12"},{"size":402,"mtime":1648974053648,"results":"17","hashOfConfig":"12"},{"size":896,"mtime":1649321614581,"results":"18","hashOfConfig":"12"},{"size":8761,"mtime":1649322069029,"results":"19","hashOfConfig":"12"},{"size":667,"mtime":1649321554233,"results":"20","hashOfConfig":"12"},{"size":4846,"mtime":1649321526186,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["56","57"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js",[],[],["58","59"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js",["60","61","62","63","64","65","66"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                        this.swapMemoContents('down');\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                        this.swapMemoContents('up');\n                    }\n                }else{\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                        this.swapTodoContents('down');\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                        this.swapTodoContents('up');\n                    }\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else {\n                    this.writeContentMode = 'todoList';\n                    this.currentMemoSelector = -1;\n                }\n                e.target.value = \"\";\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                    if( memolength!==0){\n                        for(var i = this.currentMemoSelector; i<memo-1; i++){\n                            _deleteContents[this.currentTodoSelector].memolist[i] = \n                            _deleteContents[this.currentTodoSelector].memolist[i+1]\n                        }\n                        _deleteContents[this.currentTodoSelector].memolist=\n                        _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                        if(this.currentMemoSelector=== memolength-1){\n                            this.currentMemoSelector = this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    if(this.props._contents.length ===1){\n                        _deleteContents = []\n                        this.currentTodoSelector = this.currentTodoSelector-1;\n                        this.mode = 'writeMode'\n                    }\n                    else if(this.props._contents.length !==0){\n                        for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                            _deleteContents[i] = _deleteContents[i+1];\n                        }\n                        _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                        if(this.currentTodoSelector === this.props._contents.length-1){\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                        }\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    //controll memo mode\n                    let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        \n                        if(nowMemolist.length !== 0){\n                            this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(nowMemolist.length!==0){\n                            this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    //controll todo mode\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                            this.currentTodoSelector = 0;\n                            this.actionMode = 'selectorMode'\n                        }else if(this.actionMode === 'selectorMode'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(this.actionMode === 'selectorMode'){\n                            if(this.currentTodoSelector === 0){\n                                this.actionMode ='writeMode'\n                            }else{\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n            \n            \n            if(e.metaKey && e.key ==='Enter'){\n                console.log(e);\n            }\n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <TodoMemoDivRender \n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentTodoSelector = {this.currentTodoSelector}\n            _currentMemoSelector = {this.currentMemoSelector}\n            _writeContentMode = {this.writeContentMode}\n            ></TodoMemoDivRender>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js",["67"],[],"import React from \"react\";\n\nfunction MemoInput({_memoContents,_memoIdx,_setterContents}){\n    return(\n        <input\n        className=\"todoMemoInput-memo\"\n        type = 'text'\n            placeholder=\"add Memo!\"\n            onKeyPress={function(e){\n                if(e.nativeEvent.key === 'Enter'){\n                    e.preventDefault();\n                    var resetMemo = Array.from(_memoContents);\n                    resetMemo[_memoIdx].memolist.push(e.target.value);\n                    _setterContents(resetMemo);\n                    e.target.value=\"\"\n                }\n            }.bind(this)}\n        >\n        </input>\n    );\n};\nexport default MemoInput","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiv.js",["68"],[],"import React ,{useState}from \"react\";\nimport MemoInput from \"./MemoInput\";\nimport \"./TodoElement.css\"\n\nfunction TodoMemoDiv({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                if(_writeContentMode ==='memoList'){\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n                                <MemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentTodoSelector}\n                                    _setterContents = {setAfterContents}\n                                ></MemoInput> \n                            </div>\n                            {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            {makeMemoDivList(renderContainer[i].memolist,-1)}\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDiv;\n\n\n\n\n\n    // refactorying waiting\n    // _className : todoListClassName\n    // _renderContainerElement : todolist where index i\n    // _inputMemoCheck : true or false\n    // _modeSelectCheck : true or false\n    // const makeTodoDivList =(_todoListClassName, _renderContainerElement,_inputMemoCheck,_modeSelectCheck)=>{\n    //     if(_modeSelectCheck){\n    //         if(_inputMemoCheck){\n    //             return(\n    //                 <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                     {_renderContainerElement.todolist}\n    \n    //                     <div className=\"memoInput\" key={_renderContainerElement.todolist +\"mempInputs\"}>\n    //                         <MemoInput\n    //                             _memoContents = {renderContainer}\n    //                             _memoIdx = {_currentTodoSelector}\n    //                             _setterContents = {setAfterContents}\n    //                         ></MemoInput> \n    //                     </div>\n    //                     {makeMemoDivList(_renderContainerElement.memolist)}\n    //                 </div>\n    //             )\n    //         }else{\n    //             return(\n    //                 <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                     {_renderContainerElement.todolist}\n    //                     {makeMemoDivList(_renderContainerElement.memolist)}\n    //                 </div>\n    //             )\n    //         }\n    //     }else{\n    //         return(\n    //             <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                 {_renderContainerElement.todolist}\n    //                 {makeMemoDivList(_renderContainerElement.memolist)}\n    //             </div>\n    //         )\n    //     }\n        \n    // }",{"ruleId":"69","severity":1,"message":"70","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":59,"column":9,"nodeType":"75","messageId":"76","endLine":59,"endColumn":22},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"69","severity":1,"message":"81","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":53,"column":88,"nodeType":"84","messageId":"85","endLine":53,"endColumn":90},{"ruleId":"82","severity":1,"message":"83","line":55,"column":91,"nodeType":"84","messageId":"85","endLine":55,"endColumn":93},{"ruleId":"82","severity":1,"message":"83","line":59,"column":88,"nodeType":"84","messageId":"85","endLine":59,"endColumn":90},{"ruleId":"82","severity":1,"message":"83","line":61,"column":91,"nodeType":"84","messageId":"85","endLine":61,"endColumn":93},{"ruleId":"86","severity":1,"message":"87","line":110,"column":33,"nodeType":"71","messageId":"88","endLine":110,"endColumn":34},{"ruleId":"86","severity":1,"message":"89","line":126,"column":21,"nodeType":"71","messageId":"88","endLine":126,"endColumn":41},{"ruleId":"90","severity":1,"message":"91","line":17,"column":15,"nodeType":"92","messageId":"85","endLine":17,"endColumn":19,"fix":"93"},{"ruleId":"69","severity":1,"message":"94","line":7,"column":12,"nodeType":"71","messageId":"72","endLine":7,"endColumn":23},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'render' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'_pressArrowDirection' is already defined.","no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"97","text":"98"},"'preContents' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[593,604],""]