[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js":"10","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDivEnter.js":"11","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiveFilter.js":"12"},{"size":504,"mtime":1648454521278,"results":"13","hashOfConfig":"14"},{"size":1311,"mtime":1649666785042,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1648271251510,"results":"16","hashOfConfig":"14"},{"size":2519,"mtime":1649749733838,"results":"17","hashOfConfig":"14"},{"size":293,"mtime":1648974051304,"results":"18","hashOfConfig":"14"},{"size":402,"mtime":1648974053648,"results":"19","hashOfConfig":"14"},{"size":915,"mtime":1649748004545,"results":"20","hashOfConfig":"14"},{"size":13080,"mtime":1649749935555,"results":"21","hashOfConfig":"14"},{"size":667,"mtime":1649322135669,"results":"22","hashOfConfig":"14"},{"size":1841,"mtime":1649747792287,"results":"23","hashOfConfig":"14"},{"size":4859,"mtime":1649749189783,"results":"24","hashOfConfig":"14"},{"size":3012,"mtime":1649749272444,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["68"],[],"import React, {Component, useState} from 'react';\nimport './App.css';\nimport ClockCheckNow from './TodoList/ClockCheckNow.js';\nimport Todolist from './TodoList/Todolist.js'\nimport Welcome from './TodoList/Welcome.js'\n\nclass History_nav extends Component{\n  \n  render(){\n    return(\n      <nav>\n        <div>LOGIN</div>\n        <div>CALENDER</div>\n        <div>STATICS</div>\n      </nav>\n    );\n  }\n}\n\n\n\n\n\n\n\n\nfunction App() {\n  const stageState = [\"EnterTodo\",\"FilterTodo\",\"EraseTodo\"];\n  const [prevStage,nextStage] = useState(0);\n  \n  \n  const stageChange =(stageNum)=>{\n    nextStage(stageNum);\n  }\n\n  const setStageAppClassName = (prevStage)=>{\n    let nowStageClassName;\n    if(prevStage === 0){\n      nowStageClassName = 'App-EnterTodo';\n    }else if(prevStage === 1){\n      nowStageClassName = 'App-FilterTodo';\n    }else{\n      nowStageClassName = 'App-EraseTodo';\n    }\n    return nowStageClassName;\n  }\n\n\n\n  console.log(prevStage);\n  return (\n    <div className='App'>\n      <header className={setStageAppClassName(prevStage)}>\n        <History_nav></History_nav>\n        <Welcome ></Welcome>\n        <ClockCheckNow></ClockCheckNow>\n        <Todolist\n          _stageState = {stageState}\n          stageChange = {stageChange}\n        ></Todolist>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["69","70"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Todolist.js",[],[],["71","72"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Welcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoInput.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js",["73","74","75","76","77","78","79","80"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport TodoMemoDivEnter from \"./TodoMemoDivEnter\";\nimport \"./TodoElement.css\"\nimport TodoMemoDivFilter from \"./TodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            console.log(this.props._stage);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                        if( memolength!==0){\n                            for(var i = this.currentMemoSelector; i<memo-1; i++){\n                                _deleteContents[this.currentTodoSelector].memolist[i] = \n                                _deleteContents[this.currentTodoSelector].memolist[i+1]\n                            }\n                            _deleteContents[this.currentTodoSelector].memolist=\n                            _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                            if(this.currentMemoSelector=== memolength-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(this.props._contents.length ===1){\n                            _deleteContents = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(this.props._contents.length !==0){\n                            for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                                _deleteContents[i] = _deleteContents[i+1];\n                            }\n                            _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                            if(this.currentTodoSelector === this.props._contents.length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    selectorMode면 움직이고 있는 중입니다.\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n                \n                \n                if(e.metaKey && e.key ==='Enter'){\n                    console.log(e);\n                }\n            }else if(this.props._stage === 'FilterTodo'){\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className={(this.props._stage==='EnterTodo') ? 'EnterTodo': ((this.props._stage === 'FilterTodo') ? \"FilterTodo\" : \"EraseTodo\") }>\n                {\n                    (this.props._stage === 'EnterTodo') ? (\n                        <TodoMemoDivEnter\n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></TodoMemoDivEnter>\n                    ) : (\n                        (this.props._stage==='FilterTodo') ? \n                    (\n                        <TodoMemoDivFilter\n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></TodoMemoDivFilter>\n                    ):(\n                        <TodoMemoDivEnter  \n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></TodoMemoDivEnter>\n                        )\n                    ) \n                }\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/MemoInput.js",["81"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js",["82","83"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\"\nconst Modal = (props) => {  \n    const {_modalState,_header, closeModal} = props;\n    \n    // useEffect(()=>{\n    //     if(_modalState){\n    //         let timmer = setTimeout(()=>{closeModal(false)});\n    //     }\n    // },[_header])\n\n\n\n    return (\n      // 모달이 열릴때 openModal 클래스가 생성된다.\n      <div className={ _modalState ? 'openModal modal' : 'modal'}>\n        {_modalState ? (\n          <section>\n            <header>\n              {_header}\n              <button onClick={closeModal} className=\"close\">\n                &times;\n              </button>\n            </header>\n            <main>{props.children}</main>\n            <footer>\n                <button className={_modalState ? 'next' : 'prev'} onClick={closeModal}>\n                    {_modalState ?\n                    (\n                        <div>next</div>\n                    ) : (\n                        <div>prev</div>\n                    )}\n\n                </button>\n            </footer>\n          </section>\n        ) : null}\n      </div>\n    );\n  };\n\n\n\n// function Modal(props) {\n//     const { message } = props;\n//     return (\n//       <div\n//         style={{\n//           display: \"flex\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//           position: \"initial\",\n//           bottom: 30,\n//           left: 0,\n//           width: 1000,\n//           height: 50,\n//         }}\n//       >\n//         <div\n//           style={{\n//             width: \"30%\",\n//             textAlign: \"center\",\n//             borderRadius: 30,\n//             background: \"grey\",\n//             fontSize: 20,\n//           }}\n//         >\n//           <p>{message}</p>\n//         </div>\n//       </div>\n//     );\n//   }\n  \n  export default Modal;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDivEnter.js",["84"],[],"import React ,{useState}from \"react\";\nimport MemoInput from \"./MemoInput\";\nimport \"./TodoElement.css\"\n\nfunction TodoMemoDivEnter({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                if(_writeContentMode ==='memoList'){\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n                                <MemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentTodoSelector}\n                                    _setterContents = {setAfterContents}\n                                ></MemoInput> \n                            </div>\n                            {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            {makeMemoDivList(renderContainer[i].memolist,-1)}\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDivEnter;\n\n\n\n\n\n    // refactorying waiting\n    // _className : todoListClassName\n    // _renderContainerElement : todolist where index i\n    // _inputMemoCheck : true or false\n    // _modeSelectCheck : true or false\n    // const makeTodoDivList =(_todoListClassName, _renderContainerElement,_inputMemoCheck,_modeSelectCheck)=>{\n    //     if(_modeSelectCheck){\n    //         if(_inputMemoCheck){\n    //             return(\n    //                 <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                     {_renderContainerElement.todolist}\n    \n    //                     <div className=\"memoInput\" key={_renderContainerElement.todolist +\"mempInputs\"}>\n    //                         <MemoInput\n    //                             _memoContents = {renderContainer}\n    //                             _memoIdx = {_currentTodoSelector}\n    //                             _setterContents = {setAfterContents}\n    //                         ></MemoInput> \n    //                     </div>\n    //                     {makeMemoDivList(_renderContainerElement.memolist)}\n    //                 </div>\n    //             )\n    //         }else{\n    //             return(\n    //                 <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                     {_renderContainerElement.todolist}\n    //                     {makeMemoDivList(_renderContainerElement.memolist)}\n    //                 </div>\n    //             )\n    //         }\n    //     }else{\n    //         return(\n    //             <div className={_todoListClassName} key={_renderContainerElement.todolist}>\n    //                 {_renderContainerElement.todolist}\n    //                 {makeMemoDivList(_renderContainerElement.memolist)}\n    //             </div>\n    //         )\n    //     }\n        \n    // }","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiveFilter.js",["85"],[],{"ruleId":"86","severity":1,"message":"87","line":54,"column":9,"nodeType":"88","messageId":"89","endLine":54,"endColumn":22},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":55,"column":92,"nodeType":"102","messageId":"103","endLine":55,"endColumn":94},{"ruleId":"100","severity":1,"message":"101","line":57,"column":95,"nodeType":"102","messageId":"103","endLine":57,"endColumn":97},{"ruleId":"100","severity":1,"message":"101","line":61,"column":92,"nodeType":"102","messageId":"103","endLine":61,"endColumn":94},{"ruleId":"100","severity":1,"message":"101","line":63,"column":95,"nodeType":"102","messageId":"103","endLine":63,"endColumn":97},{"ruleId":"104","severity":1,"message":"105","line":112,"column":37,"nodeType":"98","messageId":"106","endLine":112,"endColumn":38},{"ruleId":"104","severity":1,"message":"107","line":128,"column":25,"nodeType":"98","messageId":"106","endLine":128,"endColumn":45},{"ruleId":"104","severity":1,"message":"107","line":170,"column":25,"nodeType":"98","messageId":"106","endLine":170,"endColumn":45},{"ruleId":"108","severity":1,"message":"109","line":17,"column":15,"nodeType":"110","messageId":"103","endLine":17,"endColumn":19,"fix":"111"},{"ruleId":"96","severity":1,"message":"112","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"113","line":1,"column":28,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"114","line":7,"column":12,"nodeType":"98","messageId":"99","endLine":7,"endColumn":23},{"ruleId":"96","severity":1,"message":"114","line":7,"column":12,"nodeType":"98","messageId":"99","endLine":7,"endColumn":23},"react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'_pressArrowDirection' is already defined.","no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"117","text":"118"},"'useEffect' is defined but never used.","'useState' is defined but never used.","'preContents' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[593,604],""]