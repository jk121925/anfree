[{"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js":"1","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js":"2","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js":"3","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js":"4","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js":"5","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js":"6","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js":"7","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js":"8","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js":"9","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js":"10","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js":"11","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js":"12","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivReady.js":"13"},{"size":504,"mtime":1648454521278,"results":"14","hashOfConfig":"15"},{"size":1854,"mtime":1652772363759,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1648271251510,"results":"17","hashOfConfig":"15"},{"size":1032,"mtime":1652774793713,"results":"18","hashOfConfig":"15"},{"size":904,"mtime":1652110947926,"results":"19","hashOfConfig":"15"},{"size":2158,"mtime":1652675433712,"results":"20","hashOfConfig":"15"},{"size":679,"mtime":1652079239549,"results":"21","hashOfConfig":"15"},{"size":408,"mtime":1652079530744,"results":"22","hashOfConfig":"15"},{"size":299,"mtime":1652079510517,"results":"23","hashOfConfig":"15"},{"size":2058,"mtime":1652774761951,"results":"24","hashOfConfig":"15"},{"size":11931,"mtime":1652762011077,"results":"25","hashOfConfig":"15"},{"size":13111,"mtime":1652770161022,"results":"26","hashOfConfig":"15"},{"size":3094,"mtime":1652770176195,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85wm2k",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"35"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"35"},"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/index.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/App.js",["77","78","79","80","81"],[],"import React, {Component, useEffect, useState} from 'react';\nimport './App.css';\nimport AppClockCheckNow from './TodoList/AppClockCheckNow.js';\nimport AppTodolist from './TodoList/AppTodolist.js'\nimport AppWelcome from './TodoList/AppWelcome.js'\n\nclass History_nav extends Component{\n  \n  render(){\n    return(\n      <nav>\n        <div>LOGIN</div>\n        <div>CALENDER</div>\n        <div>STATICS</div>\n      </nav>\n    );\n  }\n}\n\nfunction App() {\n  const stageState = [\"EnterTodo\",\"FilterTodo\",\"EraseTodo\"];\n  const [prevStage,nextStage] = useState(0);\n\n  const calStage = (event, prevStage) =>{\n    \n    if(event.shiftKey && event.key == 'Enter' && prevStage !=2){\n      console.log(\"next stage console : \", event, prevStage);\n      return nextStage(prevStage+1);\n    }\n    else if(event.shiftKey && event.key == 'Backspace' && prevStage !=0){\n      console.log(\"prev stage console : \",event, prevStage);\n      return nextStage(prevStage-1);\n    }\n    return;\n  }\n\n\n\n  const setStageAppClassName = (prevStage)=>{\n    let nowStageClassName;\n    if(prevStage === 0){\n      nowStageClassName = 'App-EnterTodo';\n    }else if(prevStage === 1){\n      nowStageClassName = 'App-FilterTodo';\n    }else{\n      nowStageClassName = 'App-EraseTodo';\n    }\n    return nowStageClassName;\n  }\n\n\n  useEffect(()=>{\n      window.addEventListener(\"keydown\", (e) =>calStage(e,prevStage));\n      return () =>{\n        window.removeEventListener(\"keydown\",(e)=>calStage(e,prevStage));\n        console.log(\"return\")\n      }\n  }, [prevStage] )\n  \n\n  return (\n    \n    <div className='App'>\n      <header className={setStageAppClassName(prevStage)}>\n        <History_nav/>\n        <AppWelcome/>\n        <AppClockCheckNow/>\n        <AppTodolist\n          stageState = {stageState}\n          nowStage = {prevStage}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["82","83"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/reportWebVitals.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/Modal.js",["84","85"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\"\nconst Modal = (props) => {  \n    const {_modalState,_header, closeModal} = props;\n    console.log(props)\n    \n\n\n\n    return (\n      // 모달이 열릴때 openModal 클래스가 생성된다.\n      <div className={ _modalState ? 'openModal modal' : 'modal'}>\n        {_modalState ? (\n          <section>\n            <header>\n              {_header}\n              <button onClick= {closeModal} className=\"close\">\n                &times;\n              </button>\n            </header>\n            <main>{props.children}</main>\n            <footer>\n                <button className={_modalState ? 'next' : 'prev'} onClick={closeModal}>\n                    {_modalState ?\n                    (\n                        <div>next</div>\n                    ) : (\n                        <div>prev</div>\n                    )}\n\n                </button>\n            </footer>\n          </section>\n        ) : null}\n      </div>\n    );\n  };\n\n  \n  export default Modal;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerTodoInput.js",[],[],["86","87"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js",["88"],[],"import React ,{useState}from \"react\";\nimport \"./RenderTodoElementFilter.css\"\n\nfunction RenderTodoMemoDiveFilter({_currentTodoSelector,_currentMemoSelector,_filterTodoCursorListCnt,_filterTodoCursorList}){\n    let filteredList =[];\n\n    // make memo <div> list\n    // 메모 리스트를 만드는 component\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    // filteredListNum => 0 - willNotDoList,1 - readyList ,2 - willDoList\n    const makeFilterdTodoDivList =(filteredListNum,__filteredList,__filterTodoCursorListCnt,__currentTodoSelector,__currentMemoSelector)=>{\n        let tempArr =[]; let i=0;\n        let setClassName = (filteredListNum === 0) ? \"willNotDo\" : ((filteredListNum === 1) ? \"ready\" : \"willDo\");\n\n        while(i<__filteredList[filteredListNum].length){\n            \n            tempArr.push(\n                <div className={(filteredListNum === __filterTodoCursorListCnt && i === __currentTodoSelector) ? setClassName + \"-now\" : setClassName} key={__filteredList[filteredListNum][i].todolist}>\n                    {__filteredList[filteredListNum][i].todolist}\n                    {makeMemoDivList(__filteredList[filteredListNum][i].memolist,__currentMemoSelector)}\n                </div>\n            )\n            i = i+1;\n        }\n        return tempArr;\n    }\n\n\n    var i=0;\n    for( i = 0; i<3; i++){\n        filteredList.push(makeFilterdTodoDivList(i,_filterTodoCursorList,_filterTodoCursorListCnt,_currentTodoSelector,_currentMemoSelector));\n    }\n    \n    return(\n        <div className=\"filterDiv\">\n            <div className=\"willNotDoListDiv\">\n                {filteredList[0]}\n            </div>\n            <div className=\"readyListDiv\">\n                {filteredList[1]}\n            </div>\n            <div className=\"willDoListDiv\">\n                {filteredList[2]}\n            </div>\n        </div>\n    );\n};\n\nexport default RenderTodoMemoDiveFilter; ",["89","90"],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderMemoInput.js",["91"],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppWelcome.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppClockCheckNow.js",[],[],"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/AppTodolist.js",["92"],[],"import React, {useEffect, useState, useRef} from \"react\";\nimport ControllerReadyTodoList from \"./ControllerReadyTodoList.js\"\nimport ControllerTodoInput from \"./ControllerTodoInput.js\";\nimport ControllerFilterTodoList from \"./ControllerFilterTodoList.js\"\nimport Modal from \"./Modal.js\";\n\nexport default function AppTodolist(props) {\n  const [prevTodoList, nextTodoList] = useState([[],[],[]]);\n  const [prevModalState, nextModalState] = useState(false);\n  const closeModal = () =>{nextModalState(false)};\n\n  const modalMessage = (nextprev)=>{\n    if(nextprev == 'Next'){\n      let returnstr;\n      if(nextprev==='Next'){\n        returnstr = \"Few second after you go to Next step\";\n      }else if(nextprev==='Prev'){\n        returnstr = \"Few second after you go to Previous step\"\n      }\n      return returnstr;\n    }\n  }\n\n  //Modal logic\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    if (!isInitialMount.current) {\n      isInitialMount.current = true;\n    } else {\n      nextModalState(true);  \n    }\n  },[props.nowStage]);\n\n  return(\n    <div>\n      <Modal\n      _modalState={prevModalState}\n      _header={props.stageState[props.nowStage]}\n      closeModal={closeModal}\n      >\n      {modalMessage('Next')}\n      </Modal>\n\n\n      {props.nowStage === 0 ? (\n        <ControllerTodoInput \n        _stage = {props.nowStage}\n        _contents = {prevTodoList} \n\n        updateContents={nextTodoList}></ControllerTodoInput>\n      ):null}\n      {\n        (props.nowStage === 0) ? (\n          <ControllerReadyTodoList \n            _contents={prevTodoList}\n            _stage = {props.nowStage}ㅁ\n            updateContentsTodoList={nextTodoList}\n          ></ControllerReadyTodoList>\n        ) : (\n          (props.nowStage === 1) ? (\n            <ControllerFilterTodoList \n              _contents={prevTodoList}\n              _stage = {props.nowStage}\n              updateContentsTodoList={nextTodoList}\n          ></ControllerFilterTodoList>\n          ) : (\n            console.log(\"hi\")\n          )\n        )\n\n\n      }\n    </div>\n    \n  );\n\n}\n","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js",["93","94","95","96","97","98","99"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivReady from \"./RenderTodoMemoDivReady\";\n\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.currentListIndex = 1;\n        // filterTodo cursor\n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    \n    \n\n\n\n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        // console.log(\"fuck ready todo swap\");\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n            /*\n                위아래로 swap하는 기능 구현\n            */\n            \n            // console.log(\"controllerReadyTodoList : componentDidMount start------------------------\")\n            // console.log(this.props._stage);\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                        this.swapMemoContents('down',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                        this.swapMemoContents('up',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }\n                }else{\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[1].length-1){\n                        this.swapTodoContents('down',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                        this.swapTodoContents('up',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else {\n                    this.writeContentMode = 'todoList';\n                    this.currentMemoSelector = -1;\n                }\n                e.target.value = \"\";\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    if(_deleteContents[1][this.currentTodoSelector].memolist.lengt!==0){\n                        _deleteContents = this.deleteMemoContents(1,this.currentTodoSelector,this.currentMemoSelector,_deleteContents);\n                        if(this.currentMemoSelector=== _deleteContents[1][this.currentTodoSelector].memolist.lengt-1){\n                            this.currentMemoSelector = this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    if(_deleteContents.length ===1){\n                        _deleteContents[1] = []\n                        this.currentTodoSelector = this.currentTodoSelector-1;\n                        this.mode = 'writeMode'\n                    }\n                    else if(_deleteContents.length !==0){\n                        _deleteContents = this.deleteTodoContents(1,this.currentTodoSelector,_deleteContents);\n                        if(this.currentTodoSelector === _deleteContents[1].length-1){\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                        }\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                위아래로 커서 변경하는 상황\n                ************************* need refactorying **********************\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                \n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    //controll memo mode\n                    let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        \n                        if(nowMemolist.length !== 0){\n                            this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(nowMemolist.length!==0){\n                            this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    //controll todo mode\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        if(this.actionMode==='writeMode' && this.props._contents[1].length!==0){\n                            this.currentTodoSelector = 0;\n                            this.actionMode = 'selectorMode'\n                        }else if(this.actionMode === 'selectorMode'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[1].length-1)? this.props._contents[1].length-1 : this.currentTodoSelector+1;                        \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(this.actionMode === 'selectorMode'){\n                            if(this.currentTodoSelector === 0){\n                                this.actionMode ='writeMode'\n                            }else{\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n        })\n    }\n\n\n    // componentWillUnmount(){\n    //     console.log(\"ControllerReadyTodoList willUnmount\");\n    //     window.removeEventListener(\"keydown\");\n    //     console.log(\"remove Event Listener\");\n    // }\n\n\n    render(){\n        // console.log(this.props._stage);\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivReady\n                _contents={this.props._contents[1]}\n                _mode = {this.actionMode}\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _writeContentMode = {this.writeContentMode}\n                ></RenderTodoMemoDivReady>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js",["100","101","102","103","104","105","106","107"],[],"import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'selectorMode';\n        this.currentTodoSelector = 0;\n        this.currentMemoSelector = -1;\n        this.writeContentMode = 'todoList'\n        // filterTodo cursor\n        this.filterTodoCursorListCnt =1;     \n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    /*\n    TodoList 위아리 바꾸기\n    UpDown : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDown : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n\n    /*\n    nowListNum : 현재 cursor number\n    LeftRight : 이동해야하는 방향\n    */\n    changeFilterListCnt(nowListNum, LeftRight, propsContents){\n        if(LeftRight === 'ArrowRight'){\n            if(nowListNum === 1) {\n                if(propsContents[2].length ===0) nowListNum =1;\n                else nowListNum = 2;\n            }\n            else if(nowListNum === 0){\n                if(propsContents[1].length !==0) nowListNum = 1;\n                else if(propsContents[1].length ===0 && propsContents[2].length!==0) nowListNum = 2;\n                else nowListNum =0;\n            }\n        }\n        else if(LeftRight === 'ArrowLeft'){\n            if(nowListNum === 1) {\n                if(propsContents[0].length ===0) nowListNum =1;\n                else nowListNum =0;\n            }\n            else if(nowListNum ===2){\n                if(propsContents[1].length!==0) nowListNum =1;\n                else if(propsContents[1].length === 0 && propsContents[0].length!==0) nowListNum =0;\n                else nowListNum = 2;\n            }\n        }\n        return nowListNum;\n    }\n\n    changeFilterListElement(nowListNum, LeftRight, nowListIdx , propsContents, updateFunction){\n        \n        let changeFilterList = Array.from(propsContents);\n        let moveIdx =-1;\n        // 상태 변경\n        if(moveIdx === -1){\n            if(LeftRight === 'ArrowRight' && nowListNum === 2 ) return;\n            else if(LeftRight === 'ArrowRight' && nowListNum !=2 ) moveIdx = nowListNum+1;\n            else if(LeftRight === 'ArrowLeft' && nowListNum === 0 ) return;\n            else if(LeftRight === 'ArrowLeft' && nowListNum !== 0  )moveIdx = nowListNum-1;\n        }\n\n        let changeMode =(moveIdx === 0 )? 'willNotDo' : ((moveIdx === 1) ? 'ready' : 'willDo');\n        changeFilterList[nowListNum][nowListIdx].todoState = changeMode;\n        // 이동시킴\n        changeFilterList[moveIdx].push(changeFilterList[nowListNum][nowListIdx]);\n        // 원래 list에서 제거\n        for(let i=nowListIdx; i<changeFilterList[nowListNum].length-1; i++){\n            changeFilterList[nowListNum][i] = changeFilterList[nowListNum][i+1];\n        }\n        changeFilterList[nowListNum] = changeFilterList[nowListNum].slice(0, changeFilterList[nowListNum].length-1);\n        return updateFunction(changeFilterList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"controllerfiltertodolist \",this.props._contents);\n            if(this.props._stage === 1){\n                console.log(\"controllerFilterTodoList : componentDidMount start\", this.props._stage);\n                // 위치변경 로직\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n                    // console.log(this.props._contents);\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.filterTodoCursorListCnt][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[this.filterTodoCursorListCnt].length-1){\n                            this.swapTodoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }\n\n                    // change todoList mode\n                    // todoList mode를 바꾼다. Not will Do and Will Do\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowLeft', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowRight', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }\n\n                    \n                    // this.forceUpdate();\n                }\n\n\n\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                // filterTodo 상태에서 이동제어\n                // 이동에 관한 것\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                else if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[this.filterTodoCursorListCnt].length-1)? this.props._contents[this.filterTodoCursorListCnt].length-1 : this.currentTodoSelector+1;                        \n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                        }else if(_pressArrowDirection === 'ArrowLeft'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowLeft\",this.props._contents);\n                            this.currentTodoSelector =0;\n                        }else if(_pressArrowDirection === 'ArrowRight'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowRight\",this.props._contents);\n                            this.currentTodoSelector =0;\n                        }\n                    }\n                    this.forceUpdate();\n                }\n\n\n                // 메모의 상태를 변경하기 위해서 사용\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') {\n                        this.writeContentMode = 'memoList';\n                        this.currentMemoSelector = 0;\n                    }\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n                \n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        // console.log(\"render time \" ,this.props._contents);\n        return(\n            <div className=\"FilterTodo\">\n            <RenderTodoMemoDiveFilter\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n                _filterTodoCursorList = {this.props._contents}\n            ></RenderTodoMemoDiveFilter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;","/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDivReady.js",["108"],[],"import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementEnter.css\"\n\nfunction TodoMemoDivReady({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    // console.log(\"todoMemoDivEnter : render\");\n    const [preContents, AfterContents] = useState(_contents);\n    var returnList =[]\n\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                if(_writeContentMode ==='memoList'){\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n                                <RenderMemoInput\n                                    _memoContents = {renderContainer}\n                                    _memoIdx = {_currentTodoSelector}\n                                    _setterContents = {setAfterContents}\n                                ></RenderMemoInput> \n                            </div>\n                            {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                        </div>\n                    );\n                }else{\n                    returnList.push(\n                        <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                            {renderContainer[i].todolist}\n                            {makeMemoDivList(renderContainer[i].memolist,-1)}\n                        </div>\n                    );\n                }\n            }else{\n                returnList.push(\n                    <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            returnList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        returnList\n    );\n};\n\nexport default TodoMemoDivReady; ",{"ruleId":"109","severity":1,"message":"110","line":26,"column":36,"nodeType":"111","messageId":"112","endLine":26,"endColumn":38},{"ruleId":"109","severity":1,"message":"113","line":26,"column":60,"nodeType":"111","messageId":"112","endLine":26,"endColumn":62},{"ruleId":"109","severity":1,"message":"110","line":30,"column":41,"nodeType":"111","messageId":"112","endLine":30,"endColumn":43},{"ruleId":"109","severity":1,"message":"113","line":30,"column":69,"nodeType":"111","messageId":"112","endLine":30,"endColumn":71},{"ruleId":"114","severity":1,"message":"115","line":65,"column":9,"nodeType":"116","messageId":"117","endLine":65,"endColumn":23},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":26},{"ruleId":"122","severity":1,"message":"126","line":1,"column":28,"nodeType":"124","messageId":"125","endLine":1,"endColumn":36},{"ruleId":"118","replacedBy":"127"},{"ruleId":"120","replacedBy":"128"},{"ruleId":"122","severity":1,"message":"126","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":24},{"ruleId":"118","replacedBy":"129"},{"ruleId":"120","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":17,"column":15,"nodeType":"133","messageId":"112","endLine":17,"endColumn":19,"fix":"134"},{"ruleId":"109","severity":1,"message":"110","line":13,"column":17,"nodeType":"111","messageId":"112","endLine":13,"endColumn":19},{"ruleId":"122","severity":1,"message":"135","line":1,"column":10,"nodeType":"124","messageId":"125","endLine":1,"endColumn":16},{"ruleId":"122","severity":1,"message":"136","line":2,"column":27,"nodeType":"124","messageId":"125","endLine":2,"endColumn":31},{"ruleId":"109","severity":1,"message":"113","line":114,"column":88,"nodeType":"111","messageId":"112","endLine":114,"endColumn":90},{"ruleId":"109","severity":1,"message":"113","line":116,"column":91,"nodeType":"111","messageId":"112","endLine":116,"endColumn":93},{"ruleId":"109","severity":1,"message":"113","line":120,"column":88,"nodeType":"111","messageId":"112","endLine":120,"endColumn":90},{"ruleId":"109","severity":1,"message":"113","line":122,"column":91,"nodeType":"111","messageId":"112","endLine":122,"endColumn":93},{"ruleId":"137","severity":1,"message":"138","line":179,"column":21,"nodeType":"124","messageId":"139","endLine":179,"endColumn":41},{"ruleId":"122","severity":1,"message":"135","line":1,"column":10,"nodeType":"124","messageId":"125","endLine":1,"endColumn":16},{"ruleId":"122","severity":1,"message":"136","line":2,"column":27,"nodeType":"124","messageId":"125","endLine":2,"endColumn":31},{"ruleId":"109","severity":1,"message":"113","line":128,"column":62,"nodeType":"111","messageId":"112","endLine":128,"endColumn":64},{"ruleId":"109","severity":1,"message":"113","line":156,"column":92,"nodeType":"111","messageId":"112","endLine":156,"endColumn":94},{"ruleId":"109","severity":1,"message":"113","line":158,"column":95,"nodeType":"111","messageId":"112","endLine":158,"endColumn":97},{"ruleId":"109","severity":1,"message":"113","line":162,"column":92,"nodeType":"111","messageId":"112","endLine":162,"endColumn":94},{"ruleId":"109","severity":1,"message":"113","line":164,"column":95,"nodeType":"111","messageId":"112","endLine":164,"endColumn":97},{"ruleId":"137","severity":1,"message":"138","line":188,"column":25,"nodeType":"124","messageId":"139","endLine":188,"endColumn":45},{"ruleId":"122","severity":1,"message":"140","line":8,"column":12,"nodeType":"124","messageId":"125","endLine":8,"endColumn":23},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-pascal-case","Imported JSX component History_nav must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["141"],["142"],["141"],["142"],"no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"143","text":"144"},"'render' is defined but never used.","'memo' is defined but never used.","no-redeclare","'_pressArrowDirection' is already defined.","redeclared","'preContents' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[599,610],""]