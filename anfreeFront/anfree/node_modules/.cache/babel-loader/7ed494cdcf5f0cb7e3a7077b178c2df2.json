{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MemeoDivRender(_ref) {\n  let {\n    memoList\n  } = _ref;\n  var i = 0;\n  var memoDivList = [];\n\n  while (i < memoList.length) {\n    memoDivList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memoElement\",\n      children: memoList[i]\n    }, memoList[i], false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this));\n    i = i + 1;\n  }\n\n  return {\n    memoDivList\n  };\n} // mode, contents\n\n\n_c = MemeoDivRender;\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.actionMode = 'writeMode';\n    this.wirteContentMode = 'todoList';\n    this.currentSelector = -1;\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentSelector];\n    updateContentsList[this.currentSelector] = updateContentsList[this.currentSelector + upDownInt];\n    updateContentsList[this.currentSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  } //not use in this phase\n\n\n  structTodoMemo(input) {\n    let memocdivcheck = \"memoElement-\"; // let memoDivList = input.memoList.map((memo)=>\n    //     <div className=\"memoElement\" key={memocdivcheck + memo}>{memo}</div>\n    // );\n    // console.log(\"memoDiv\");\n    // console.log(memoDivList);\n\n    var todoTreestruct = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todoMainElement\",\n      children: [input.todolist, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"memoElement\",\n        children: input.memoList[0]\n      }, input.memoList[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, input.todolist, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n\n    console.log(todoTreestruct);\n    return todoTreestruct;\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown' && this.currentSelector != this.props._contents.length - 1) {\n          console.log(this.currentSelector);\n          this.swapContents('down');\n        } else if (_pressArrowDirection === 'ArrowUp' && this.currentSelector != 0) {\n          this.swapContents('up');\n        }\n      }\n      /**\n       * 메모기능 구현\n       * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n       * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n       * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n       * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n       * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n       */\n\n\n      if (this.actionMode === 'selectorMode' && e.key === '/') {\n        if (this.wirteContentMode === 'todoList') this.wirteContentMode = 'memoList';else this.wirteContentMode = 'todoList';\n        this.forceUpdate();\n      }\n      /*\n          delete 기능 구현\n      */\n\n\n      if (e.shiftKey && e.key === 'Delete') {\n        var _deleteContents = Array.from(this.props._contents);\n\n        if (this.props._contents.length === 1) {\n          _deleteContents = [];\n          this.currentSelector = this.currentSelector - 1;\n          this.mode = 'writeMode';\n        } else if (this.props._contents.length !== 0) {\n          for (var i = this.currentSelector; i < _deleteContents.length - 1; i++) {\n            _deleteContents[i] = _deleteContents[i + 1];\n          }\n\n          _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n          if (this.currentSelector === this.props._contents.length - 1) {\n            this.currentSelector = this.currentSelector - 1;\n          }\n        }\n\n        this.props.updateContentsTodoList(_deleteContents);\n      }\n      /*\n          writeMode vs selectorMode \n          selectorMode면 움직이고 있는 중입니다.\n      */\n\n\n      if (37 <= e.keyCode && e.keyCode <= 40) {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown') {\n          if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n            this.currentSelector = 0;\n            this.actionMode = 'selectorMode';\n            this.props.modeChange('selectorMode');\n          } else if (this.actionMode === 'selectorMode') {\n            this.currentSelector = this.currentSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentSelector + 1;\n          }\n        } else if (_pressArrowDirection === 'ArrowUp') {\n          if (this.actionMode === 'selectorMode') {\n            if (this.currentSelector === 0) {\n              this.actionMode = 'writeMode';\n              this.props.modeChange('selectorMode');\n            } else {\n              this.currentSelector = this.currentSelector === 0 ? 0 : this.currentSelector - 1;\n            }\n          }\n        }\n\n        this.forceUpdate();\n      } //end arrow if test\n\n    });\n  }\n\n  makeTodoElementByOrder(selectNumber, mode) {\n    var renderList = [];\n    var renderContainer = Array.from(this.props._contents);\n    var i = 0;\n\n    if (mode === 'selectorMode') {\n      while (i < renderContainer.length) {\n        if (selectNumber !== -1 && i === selectNumber) {\n          renderList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todoMainElement-now\",\n            children: renderContainer[i].todolist\n          }, renderContainer[i].todolist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 41\n          }, this));\n        } else {\n          renderList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todoMainElement\",\n            children: renderContainer[i].todolist\n          }, renderContainer[i].todolist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 41\n          }, this));\n        }\n\n        i = i + 1;\n      }\n    } else {//render default -> input todolist\n      // while(i<renderContainer.length){\n      //     renderList.push(<div className=\"todoMainElement\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n      //     i=i+1;\n      // }\n    }\n\n    return renderList;\n  }\n\n  render() {\n    // var renderList = this.makeTodoElementByOrder(this.currentSelector,this.actionMode);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TodoMemoDivRender, {\n        _contents: this.props._contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeoDivRender\");","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js"],"names":["render","React","Component","TodoMemoDivRender","MemeoDivRender","memoList","i","memoDivList","length","push","RenderTodoList","constructor","props","actionMode","wirteContentMode","currentSelector","state","pressShiftCnt","pressArrowDirection","swapContents","UpDown","upDownInt","updateContentsList","Array","from","_contents","temp","updateContentsTodoList","structTodoMemo","input","memocdivcheck","todoTreestruct","todolist","console","log","componentDidMount","window","addEventListener","e","shiftKey","keyCode","_pressArrowDirection","key","forceUpdate","_deleteContents","mode","slice","modeChange","makeTodoElementByOrder","selectNumber","renderList","renderContainer"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component} from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"\n\nfunction MemeoDivRender({memoList}){\n    var i=0;\n    var memoDivList =[]\n    while(i<memoList.length) {\n        memoDivList.push(\n            <div className=\"memoElement\" key={memoList[i]}>{memoList[i]}</div>\n        )\n        i=i+1;\n    }   \n\n    return(\n        {memoDivList}\n    );\n}\n\n\n\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        this.actionMode = 'writeMode';\n        this.wirteContentMode = 'todoList';\n        this.currentSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentSelector];\n        updateContentsList[this.currentSelector] = updateContentsList[this.currentSelector+upDownInt];\n        updateContentsList[this.currentSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    //not use in this phase\n    structTodoMemo(input){\n        let memocdivcheck = \"memoElement-\"\n        // let memoDivList = input.memoList.map((memo)=>\n        //     <div className=\"memoElement\" key={memocdivcheck + memo}>{memo}</div>\n        // );\n        // console.log(\"memoDiv\");\n        // console.log(memoDivList);\n        var todoTreestruct=\n        <div className=\"todoMainElement\" key={input.todolist}>\n            {input.todolist}\n            <div className=\"memoElement\" key={input.memoList[0]}>{input.memoList[0]}</div>\n                {/* {memoDivList} */}\n        </div>\n        console.log(todoTreestruct);\n        return todoTreestruct\n    }\n\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown' && this.currentSelector!=this.props._contents.length-1){\n                    console.log(this.currentSelector)\n                    this.swapContents('down');\n                }else if(_pressArrowDirection==='ArrowUp' && this.currentSelector !=0){\n                    this.swapContents('up');\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.wirteContentMode === 'todoList') this.wirteContentMode = 'memoList';\n                else this.wirteContentMode = 'todoList';\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.props._contents.length ===1){\n                    _deleteContents = []\n                    this.currentSelector = this.currentSelector-1;\n                    this.mode = 'writeMode'\n                }\n                else if(this.props._contents.length !==0){\n                    for(var i=this.currentSelector; i<_deleteContents.length-1; i++){\n                        _deleteContents[i] = _deleteContents[i+1];\n                    }\n                    _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                    if(this.currentSelector === this.props._contents.length-1){\n                        this.currentSelector = this.currentSelector-1;\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown'){\n                    if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                        this.currentSelector = 0;\n                        this.actionMode = 'selectorMode'\n                        this.props.modeChange('selectorMode')\n                    }else if(this.actionMode === 'selectorMode'){\n                        this.currentSelector = (this.currentSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentSelector+1;                        \n                    }\n                }else if(_pressArrowDirection === 'ArrowUp'){\n                    if(this.actionMode === 'selectorMode'){\n                        if(this.currentSelector === 0){\n                            this.actionMode ='writeMode'\n                            this.props.modeChange('selectorMode')\n                        }else{\n                            this.currentSelector = (this.currentSelector === 0)? 0 : this.currentSelector-1;\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n            \n        })\n    }\n\n\n\n\n    makeTodoElementByOrder(selectNumber, mode){\n        var renderList =[];\n        var renderContainer = Array.from(this.props._contents);\n        var i = 0;\n        if(mode === 'selectorMode'){\n                while(i<renderContainer.length){\n                    if(selectNumber!==-1 && i === selectNumber){\n                        renderList.push(<div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n                    }else{\n                        renderList.push(<div className=\"todoMainElement\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n                    }\n                    i=i+1;\n                }\n        }else{\n            \n            //render default -> input todolist\n            // while(i<renderContainer.length){\n            //     renderList.push(<div className=\"todoMainElement\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n            //     i=i+1;\n            // }\n            \n            \n        }\n        return renderList;\n    }\n\n\n    render(){\n        // var renderList = this.makeTodoElementByOrder(this.currentSelector,this.actionMode);\n        return(\n            <div>\n                <TodoMemoDivRender \n                _contents={this.props._contents}\n                ></TodoMemoDivRender>\n                {/* {renderList} */}\n            </div>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}