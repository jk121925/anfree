{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'selectorMode';\n    this.currentTodoSelector = 0;\n    this.currentMemoSelector = -1;\n    this.readyList = this.props._contents;\n    this.willNotDoList = [];\n    this.willDoList = []; // filterTodo cursor\n\n    this.filterTodoCursorList = ['willNotDo', 'ready', 'willDo'];\n    this.state = {\n      pressArrowDirection: ''\n    };\n  } //다시\n\n\n  swapTodoContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentTodoSelector];\n    updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector + upDownInt];\n    updateContentsList[this.currentTodoSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  } //다시\n\n\n  swapMemoContents(UpDown) {\n    let memoIdx = this.currentMemoSelector;\n    let todoIdx = this.currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[todoIdx].memolist[memoIdx];\n    updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[todoIdx].memolist[memoIdx + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      /**\n       * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n       * Second stage -> filterTodo 일 때  동작하는 로직\n       * RenderTodoList가 복잡해 지지만 한곳에서 관리하는게 더 나을 수 있다는 생각을 해봅니다.\n       * 후에 따로 빼서 관리하는 방법이 필요 할 수 있습니다.\n       * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n       */\n      if (this.props._stage === 'FilterTodo') {\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up');\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n              this.swapTodoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up');\n            }\n          } // change todoList mode\n          // todoList mode를 바꾼다. Not will Do and Will Do\n\n\n          if (_pressArrowDirection === 'ArrowLeft') {\n            let _contentsUpdate = Array.from(this.props._contents);\n\n            _contentsUpdate[this.currentTodoSelector].todoState = \"NotWillDo\";\n            this.props.updateContentsTodoList(_contentsUpdate);\n          } else if (_pressArrowDirection === 'ArrowRight') {\n            let _contentsUpdate = Array.from(this.props._contents);\n\n            _contentsUpdate[this.currentTodoSelector].todoState = \"WillDo\";\n            this.props.updateContentsTodoList(_contentsUpdate);\n          }\n\n          console.log(this.props._contents);\n        } // 메모의 상태를 변경하기 위해서 사용\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') {\n            this.writeContentMode = 'memoList';\n            this.currentMemoSelector = 0;\n          } else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n\n          e.target.value = \"\";\n          this.forceUpdate();\n        } // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        // filterTodo 상태에서 이동제어\n        // 이동에 관한 것\n        // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowLeft') {\n              this.filterTodoCursorListCnt = this.filterTodoCursorListCnt == 0 ? 0 : this.filterTodoCursorListCnt - 1;\n              console.log(\"filter enter Arrow left\");\n            } else if (_pressArrowDirection === 'ArrowRight') {\n              console.log(\"filter enter Arrow Right\");\n              this.filterTodoCursorListCnt = this.filterTodoCursorListCnt == 2 ? 2 : this.filterTodoCursorListCnt + 1;\n            }\n          }\n\n          this.forceUpdate();\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDiveFilter, {\n        _contents: this.props._contents,\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode,\n        _filterTodoCursorListCnt: this.filterTodoCursorListCnt,\n        _filterTodoInnerCursor: this.filterTodoInnerCursor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","currentTodoSelector","currentMemoSelector","readyList","_contents","willNotDoList","willDoList","filterTodoCursorList","state","pressArrowDirection","swapTodoContents","UpDown","upDownInt","updateContentsList","Array","from","temp","updateContentsTodoList","swapMemoContents","memoIdx","todoIdx","memolist","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","writeContentMode","memolength","length","_contentsUpdate","todoState","console","log","target","value","forceUpdate","nowMemolist","filterTodoCursorListCnt","filterTodoInnerCursor"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'selectorMode';\n        this.currentTodoSelector = 0;\n        this.currentMemoSelector = -1;\n        this.readyList = this.props._contents;\n        this.willNotDoList = [];\n        this.willDoList =[];\n        // filterTodo cursor\n        this.filterTodoCursorList =['willNotDo','ready','willDo'];        \n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    //다시\n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n    //다시\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            /**\n             * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n             * Second stage -> filterTodo 일 때  동작하는 로직\n             * RenderTodoList가 복잡해 지지만 한곳에서 관리하는게 더 나을 수 있다는 생각을 해봅니다.\n             * 후에 따로 빼서 관리하는 방법이 필요 할 수 있습니다.\n             * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n             */\n            if(this.props._stage === 'FilterTodo'){\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                    // change todoList mode\n                    // todoList mode를 바꾼다. Not will Do and Will Do\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        let _contentsUpdate = Array.from(this.props._contents);\n                        _contentsUpdate[this.currentTodoSelector].todoState = \"NotWillDo\";\n                        this.props.updateContentsTodoList(_contentsUpdate);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        let _contentsUpdate = Array.from(this.props._contents);\n                        _contentsUpdate[this.currentTodoSelector].todoState = \"WillDo\";\n                        this.props.updateContentsTodoList(_contentsUpdate);    \n                    }\n                    console.log(this.props._contents);\n                }\n\n\n                // 메모의 상태를 변경하기 위해서 사용\n\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') {\n                        this.writeContentMode = 'memoList';\n                        this.currentMemoSelector = 0;\n                    }\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                // filterTodo 상태에서 이동제어\n                // 이동에 관한 것\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }else if(_pressArrowDirection === 'ArrowLeft'){\n                            this.filterTodoCursorListCnt = (this.filterTodoCursorListCnt == 0) ? 0 : this.filterTodoCursorListCnt-1;\n                            console.log(\"filter enter Arrow left\")\n                        }else if(_pressArrowDirection === 'ArrowRight'){\n                            console.log(\"filter enter Arrow Right\")\n                            this.filterTodoCursorListCnt = (this.filterTodoCursorListCnt == 2) ? 2 : this.filterTodoCursorListCnt+1;\n                        }\n                    }\n                    this.forceUpdate();\n                }\n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"FilterTodo\">\n            <RenderTodoMemoDiveFilter\n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentTodoSelector = {this.currentTodoSelector}\n            _currentMemoSelector = {this.currentMemoSelector}\n            _writeContentMode = {this.writeContentMode}\n            _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n            _filterTodoInnerCursor = {this.filterTodoInnerCursor}\n            ></RenderTodoMemoDiveFilter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}