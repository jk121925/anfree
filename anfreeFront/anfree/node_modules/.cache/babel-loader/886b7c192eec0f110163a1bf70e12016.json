{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport \"./TodoElement.css\";\nimport \"./TodoListClass.js\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.todoMode = 'writeMode';\n    this.currentSelector = -1;\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentSelector];\n    updateContentsList[this.currentSelector] = updateContentsList[this.currentSelector + upDownInt];\n    updateContentsList[this.currentSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.todoMode === 'selectorMode') {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown' && this.currentSelector != this.props._contents.length - 1) {\n          console.log(this.currentSelector);\n          this.swapContents('down');\n        } else if (_pressArrowDirection === 'ArrowUp' && this.currentSelector != 0) {\n          this.swapContents('up');\n        }\n      }\n      /**\n       * 메모기능 구현\n       * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n       * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n       * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n       * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n       * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n       */\n\n      /*\n          delete 기능 구현\n      */\n\n\n      if (e.shiftKey && e.key === 'Delete') {\n        var _deleteContents = Array.from(this.props._contents);\n\n        if (this.props._contents.length === 1) {\n          _deleteContents = [];\n          this.currentSelector = this.currentSelector - 1;\n          this.mode = 'writeMode';\n        } else if (this.props._contents.length !== 0) {\n          for (var i = this.currentSelector; i < _deleteContents.length - 1; i++) {\n            _deleteContents[i] = _deleteContents[i + 1];\n          }\n\n          _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n          if (this.currentSelector === this.props._contents.length - 1) {\n            this.currentSelector = this.currentSelector - 1;\n          }\n        }\n\n        this.props.updateContentsTodoList(_deleteContents);\n      }\n      /*\n          writeMode vs selectorMode \n          selectorMode면 움직이고 있는 중입니다.\n      */\n\n\n      if (37 <= e.keyCode && e.keyCode <= 40) {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown') {\n          if (this.todoMode === 'writeMode' && this.props._contents.length !== 0) {\n            this.currentSelector = 0;\n            this.todoMode = 'selectorMode';\n            this.props.modeChange('selectorMode');\n          } else if (this.todoMode === 'selectorMode') {\n            this.currentSelector = this.currentSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentSelector + 1;\n          }\n        } else if (_pressArrowDirection === 'ArrowUp') {\n          if (this.todoMode === 'selectorMode') {\n            if (this.currentSelector === 0) {\n              this.todoMode = 'writeMode';\n              this.props.modeChange('selectorMode');\n            } else {\n              this.currentSelector = this.currentSelector === 0 ? 0 : this.currentSelector - 1;\n            }\n          }\n        }\n\n        this.forceUpdate();\n      } //end arrow if test\n\n    });\n  }\n\n  makeTodoElementByOrder(selectNumber, mode) {\n    var renderList = [];\n    var renderContainer = Array.from(this.props._contents);\n    console.log(renderContainer[0].todolist);\n    var i = 0;\n\n    if (mode === 'selectorMode') {\n      while (i < renderContainer.length) {\n        if (selectNumber !== -1 && i === selectNumber) {\n          renderList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todoMainElement-now\",\n            children: renderContainer[i].todolist\n          }, renderContainer[i].todolist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 37\n          }, this));\n        } else {\n          renderList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todoMainElement\",\n            children: renderContainer[i].todolist\n          }, renderContainer[i].todolist, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 37\n          }, this));\n        }\n\n        i = i + 1;\n      }\n    } else {\n      //render default -> input todolist\n      while (i < renderContainer.length) {\n        renderList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todoMainElement\",\n          children: renderContainer[i].todolist\n        }, renderContainer[i].todolist, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 33\n        }, this));\n        i = i + 1;\n      }\n    }\n\n    console.log(renderList);\n    return renderList;\n  }\n\n  render() {\n    var renderList = this.makeTodoElementByOrder(this.currentSelector, this.todoMode);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js"],"names":["render","React","Component","RenderTodoList","constructor","props","todoMode","currentSelector","state","pressShiftCnt","pressArrowDirection","swapContents","UpDown","upDownInt","updateContentsList","Array","from","_contents","temp","updateContentsTodoList","componentDidMount","window","addEventListener","e","shiftKey","keyCode","_pressArrowDirection","key","length","console","log","_deleteContents","mode","i","slice","modeChange","forceUpdate","makeTodoElementByOrder","selectNumber","renderList","renderContainer","todolist","push"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component} from \"react\";\nimport \"./TodoElement.css\"\nimport \"./TodoListClass.js\"\n\n\n\n\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        this.todoMode = 'writeMode';\n        this.currentSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentSelector];\n        updateContentsList[this.currentSelector] = updateContentsList[this.currentSelector+upDownInt];\n        updateContentsList[this.currentSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.todoMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown' && this.currentSelector!=this.props._contents.length-1){\n                    console.log(this.currentSelector)\n                    this.swapContents('down');\n                }else if(_pressArrowDirection==='ArrowUp' && this.currentSelector !=0){\n                    this.swapContents('up');\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.props._contents.length ===1){\n                    _deleteContents = []\n                    this.currentSelector = this.currentSelector-1;\n                    this.mode = 'writeMode'\n                }\n                else if(this.props._contents.length !==0){\n                    for(var i=this.currentSelector; i<_deleteContents.length-1; i++){\n                        _deleteContents[i] = _deleteContents[i+1];\n                    }\n                    _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                    if(this.currentSelector === this.props._contents.length-1){\n                        this.currentSelector = this.currentSelector-1;\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown'){\n                    if(this.todoMode==='writeMode' && this.props._contents.length!==0){\n                        this.currentSelector = 0;\n                        this.todoMode = 'selectorMode'\n                        this.props.modeChange('selectorMode')\n                    }else if(this.todoMode === 'selectorMode'){\n                        this.currentSelector = (this.currentSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentSelector+1;                        \n                    }\n                }else if(_pressArrowDirection === 'ArrowUp'){\n                    if(this.todoMode === 'selectorMode'){\n                        if(this.currentSelector === 0){\n                            this.todoMode ='writeMode'\n                            this.props.modeChange('selectorMode')\n                        }else{\n                            this.currentSelector = (this.currentSelector === 0)? 0 : this.currentSelector-1;\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n            \n        })\n    }\n\n\n\n\n    makeTodoElementByOrder(selectNumber, mode){\n        \n        var renderList =[];\n        var renderContainer = Array.from(this.props._contents);\n        console.log(renderContainer[0].todolist);\n        var i = 0;\n        if(mode === 'selectorMode'){\n            while(i<renderContainer.length){\n                if(selectNumber!==-1 && i === selectNumber){\n                    renderList.push(<div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n                }else{\n                    renderList.push(<div className=\"todoMainElement\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n                }\n                i=i+1;\n            }\n        }else{\n            //render default -> input todolist\n            while(i<renderContainer.length){\n                renderList.push(<div className=\"todoMainElement\" key={renderContainer[i].todolist}>{renderContainer[i].todolist}</div>);\n                i=i+1;\n            }\n            \n            \n        }\n        console.log(renderList);\n        return renderList;\n    }\n\n\n    render(){\n        var renderList = this.makeTodoElementByOrder(this.currentSelector,this.todoMode);\n        return(\n            <div>\n                {renderList}\n            </div>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}