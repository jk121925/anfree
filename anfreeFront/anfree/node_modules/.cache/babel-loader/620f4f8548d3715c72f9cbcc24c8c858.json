{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'writeMode'; // writeContentMode : todoList, memoList\n\n    this.writeContentMode = 'todoList'; // TodoList controll selector\n\n    this.currentTodoSelector = -1;\n    this.currentMemoSelector = -1;\n    this.currentListIndex = 1; // filterTodo cursor\n\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapTodoContents(UpDown, targetList, currentSelector, updateFunction) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[targetList][currentSelector];\n    updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n    updateContentsList[targetList][currentSelector + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n\n  swapMemoContents(UpDown, targetList, currentTodoSelector, currentMemoSelector, updateFunction) {\n    let memoIdx = currentMemoSelector;\n    let todoIdx = currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n\n  deleteMemoContents() {\n    var _deleteContents = Array.from(this.props._contents);\n\n    if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n      let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n\n      if (memolength !== 0) {\n        for (var i = this.currentMemoSelector; i < memo - 1; i++) {\n          _deleteContents[this.currentTodoSelector].memolist[i] = _deleteContents[this.currentTodoSelector].memolist[i + 1];\n        }\n\n        _deleteContents[this.currentTodoSelector].memolist = _deleteContents[this.currentTodoSelector].memolist.slice(0, memolength - 1);\n\n        if (this.currentMemoSelector === memolength - 1) {\n          this.currentMemoSelector = this.currentMemoSelector - 1;\n        }\n      }\n    } else {\n      if (this.props._contents.length === 1) {\n        _deleteContents = [];\n        this.currentTodoSelector = this.currentTodoSelector - 1;\n        this.mode = 'writeMode';\n      } else if (this.props._contents.length !== 0) {\n        for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n          _deleteContents[i] = _deleteContents[i + 1];\n        }\n\n        _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n        if (this.currentTodoSelector === this.props._contents.length - 1) {\n          this.currentTodoSelector = this.currentTodoSelector - 1;\n        }\n      }\n    }\n\n    this.props.updateContentsTodoList(_deleteContents);\n  }\n\n  deleteTodoContents(targetList) {\n    var _deleteContents = Array.from(this.props._contents);\n\n    if (this.props._contents[targetList].length === 1) {\n      _deleteContents = [];\n      this.currentTodoSelector = this.currentTodoSelector - 1;\n      this.mode = 'writeMode';\n    } else if (this.props._contents[targetList].length !== 0) {\n      for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n        _deleteContents[i] = _deleteContents[i + 1];\n      }\n\n      _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n      if (this.currentTodoSelector === this.props._contents[targetList].length - 1) {\n        this.currentTodoSelector = this.currentTodoSelector - 1;\n      }\n    }\n\n    this.props.updateContentsTodoList(_deleteContents);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (this.props._stage === 'EnterTodo') {\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList);\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents[1].length - 1) {\n              this.swapTodoContents('down', 1, this.currentTodoSelector, this.props.updateContentsTodoList);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up', 1, this.currentTodoSelector, this.props.updateContentsTodoList);\n            }\n          }\n        }\n        /**\n         * 메모기능 구현\n         * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n         * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n         * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n         * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n         * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n         */\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n          e.target.value = \"\";\n          this.forceUpdate();\n        }\n        /*\n            delete 기능 구현\n        */\n\n\n        if (e.shiftKey && e.key === 'Delete') {\n          var _deleteContents = Array.from(this.props._contents);\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n\n            if (memolength !== 0) {\n              for (var i = this.currentMemoSelector; i < memo - 1; i++) {\n                _deleteContents[this.currentTodoSelector].memolist[i] = _deleteContents[this.currentTodoSelector].memolist[i + 1];\n              }\n\n              _deleteContents[this.currentTodoSelector].memolist = _deleteContents[this.currentTodoSelector].memolist.slice(0, memolength - 1);\n\n              if (this.currentMemoSelector === memolength - 1) {\n                this.currentMemoSelector = this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            if (this.props._contents.length === 1) {\n              _deleteContents = [];\n              this.currentTodoSelector = this.currentTodoSelector - 1;\n              this.mode = 'writeMode';\n            } else if (this.props._contents.length !== 0) {\n              for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n                _deleteContents[i] = _deleteContents[i + 1];\n              }\n\n              _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n              if (this.currentTodoSelector === this.props._contents.length - 1) {\n                this.currentTodoSelector = this.currentTodoSelector - 1;\n              }\n            }\n          }\n\n          this.props.updateContentsTodoList(_deleteContents);\n        }\n        /*\n            writeMode vs selectorMode \n            selectorMode면 움직이고 있는 중입니다.\n        */\n\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                if (this.currentTodoSelector === 0) {\n                  this.actionMode = 'writeMode';\n                } else {\n                  this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n                }\n              }\n            }\n          }\n\n          this.forceUpdate();\n        } //end arrow if test\n\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EnterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDivEnter, {\n        _contents: this.props._contents,\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this) //    <div className={(this.props._stage==='EnterTodo') ? 'EnterTodo': ((this.props._stage === 'FilterTodo') ? \"FilterTodo\" : \"EraseTodo\") }>\n    //         {\n    //             (this.props._stage === 'EnterTodo') ? (\n    //                 <RenderTodoMemoDivEnter\n    //                 _contents={this.props._contents}\n    //                 _mode = {this.actionMode}\n    //                 _currentTodoSelector = {this.currentTodoSelector}\n    //                 _currentMemoSelector = {this.currentMemoSelector}\n    //                 _writeContentMode = {this.writeContentMode}\n    //                 ></RenderTodoMemoDivEnter>\n    //             ) : (\n    //                 (this.props._stage==='FilterTodo') ? \n    //             (\n    //                 <div className=\"todoMemoDiv\">\n    //                     <div className=\"FilterTodoContainer\">\n    //                     <RenderTodoMemoDiveFilter\n    //                     _contents={this.props._contents}\n    //                     _mode = {this.actionMode}\n    //                     _currentTodoSelector = {this.currentTodoSelector}\n    //                     _currentMemoSelector = {this.currentMemoSelector}\n    //                     _writeContentMode = {this.writeContentMode}\n    //                     _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n    //                     _filterTodoInnerCursor = {this.filterTodoInnerCursor}\n    //                     ></RenderTodoMemoDiveFilter>\n    //                     </div>\n    //                 </div>\n    //             ):(\n    //                 <RenderTodoMemoDivEnter  \n    //                 _contents={this.props._contents}\n    //                 _mode = {this.actionMode}\n    //                 _currentTodoSelector = {this.currentTodoSelector}\n    //                 _currentMemoSelector = {this.currentMemoSelector}\n    //                 _writeContentMode = {this.writeContentMode}\n    //                 ></RenderTodoMemoDivEnter>\n    //                 )\n    //             ) \n    //         }\n    //     </div>\n    ;\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDivEnter","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","currentMemoSelector","currentListIndex","state","pressShiftCnt","pressArrowDirection","swapTodoContents","UpDown","targetList","currentSelector","updateFunction","upDownInt","updateContentsList","Array","from","_contents","temp","swapMemoContents","memoIdx","todoIdx","memolist","deleteMemoContents","_deleteContents","memolength","length","i","slice","mode","updateContentsTodoList","deleteTodoContents","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","target","value","forceUpdate","nowMemolist"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.currentListIndex = 1;\n        // filterTodo cursor\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    deleteMemoContents(){\n        var _deleteContents = Array.from(this.props._contents)\n        if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n            let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n            if(memolength!==0){\n                for(var i = this.currentMemoSelector; i<memo-1; i++){\n                    _deleteContents[this.currentTodoSelector].memolist[i] = \n                    _deleteContents[this.currentTodoSelector].memolist[i+1]\n                }\n                _deleteContents[this.currentTodoSelector].memolist=\n                _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                if(this.currentMemoSelector=== memolength-1){\n                    this.currentMemoSelector = this.currentMemoSelector-1;\n                }\n            }\n        }\n        else{\n            if(this.props._contents.length ===1){\n                _deleteContents = []\n                this.currentTodoSelector = this.currentTodoSelector-1;\n                this.mode = 'writeMode'\n            }\n            else if(this.props._contents.length !==0){\n                for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                    _deleteContents[i] = _deleteContents[i+1];\n                }\n                _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                if(this.currentTodoSelector === this.props._contents.length-1){\n                    this.currentTodoSelector = this.currentTodoSelector-1;\n                }\n            }\n        }\n        this.props.updateContentsTodoList(_deleteContents);\n    }\n\n    deleteTodoContents(targetList){\n        var _deleteContents = Array.from(this.props._contents)\n\n        if(this.props._contents[targetList].length ===1){\n            _deleteContents = []\n            this.currentTodoSelector = this.currentTodoSelector-1;\n            this.mode = 'writeMode'\n        }\n        else if(this.props._contents[targetList].length !==0){\n            for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                _deleteContents[i] = _deleteContents[i+1];\n            }\n            _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n            if(this.currentTodoSelector === this.props._contents[targetList].length-1){\n                this.currentTodoSelector = this.currentTodoSelector-1;\n            }\n        }\n        this.props.updateContentsTodoList(_deleteContents);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[1].length-1){\n                            this.swapTodoContents('down',1,this.currentTodoSelector,this.props.updateContentsTodoList);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',1,this.currentTodoSelector,this.props.updateContentsTodoList);\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                        if(memolength!==0){\n                            for(var i = this.currentMemoSelector; i<memo-1; i++){\n                                _deleteContents[this.currentTodoSelector].memolist[i] = \n                                _deleteContents[this.currentTodoSelector].memolist[i+1]\n                            }\n                            _deleteContents[this.currentTodoSelector].memolist=\n                            _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                            if(this.currentMemoSelector=== memolength-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(this.props._contents.length ===1){\n                            _deleteContents = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(this.props._contents.length !==0){\n                            for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                                _deleteContents[i] = _deleteContents[i+1];\n                            }\n                            _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                            if(this.currentTodoSelector === this.props._contents.length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    selectorMode면 움직이고 있는 중입니다.\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n            }\n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivEnter\n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></RenderTodoMemoDivEnter>\n            </div>\n           \n        //    <div className={(this.props._stage==='EnterTodo') ? 'EnterTodo': ((this.props._stage === 'FilterTodo') ? \"FilterTodo\" : \"EraseTodo\") }>\n        //         {\n        //             (this.props._stage === 'EnterTodo') ? (\n        //                 <RenderTodoMemoDivEnter\n        //                 _contents={this.props._contents}\n        //                 _mode = {this.actionMode}\n        //                 _currentTodoSelector = {this.currentTodoSelector}\n        //                 _currentMemoSelector = {this.currentMemoSelector}\n        //                 _writeContentMode = {this.writeContentMode}\n        //                 ></RenderTodoMemoDivEnter>\n        //             ) : (\n        //                 (this.props._stage==='FilterTodo') ? \n        //             (\n        //                 <div className=\"todoMemoDiv\">\n        //                     <div className=\"FilterTodoContainer\">\n        //                     <RenderTodoMemoDiveFilter\n        //                     _contents={this.props._contents}\n        //                     _mode = {this.actionMode}\n        //                     _currentTodoSelector = {this.currentTodoSelector}\n        //                     _currentMemoSelector = {this.currentMemoSelector}\n        //                     _writeContentMode = {this.writeContentMode}\n        //                     _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n        //                     _filterTodoInnerCursor = {this.filterTodoInnerCursor}\n        //                     ></RenderTodoMemoDiveFilter>\n        //                     </div>\n        //                 </div>\n        //             ):(\n        //                 <RenderTodoMemoDivEnter  \n        //                 _contents={this.props._contents}\n        //                 _mode = {this.actionMode}\n        //                 _currentTodoSelector = {this.currentTodoSelector}\n        //                 _currentMemoSelector = {this.currentMemoSelector}\n        //                 _writeContentMode = {this.writeContentMode}\n        //                 ></RenderTodoMemoDivEnter>\n        //                 )\n        //             ) \n        //         }\n        //     </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}