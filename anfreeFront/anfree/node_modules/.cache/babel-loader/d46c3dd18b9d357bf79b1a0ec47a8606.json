{"ast":null,"code":"/*\nTodoList 위아리 바꾸기\nUpDonw : 위인지 아래인지\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\nupdateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\nconst swapTodoContents = (UpDown, targetList, currentSelector, updateFunction, propsContents) => {\n  // console.log(\"fuck ready todo swap\");\n  var upDownInt = UpDown === 'up' ? -1 : 1;\n  var updateContentsList = Array.from(propsContents);\n  var temp = updateContentsList[targetList][currentSelector];\n  updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n  updateContentsList[targetList][currentSelector + upDownInt] = temp;\n  updateFunction(updateContentsList);\n};\n/*\nMemo 위아래 바꾸기\nUpDonw : 위인지 아래인지\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\ncurrentMemoSelector : 현재 선택된 메모 번호\nupdateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\n\nconst swapMemoContents = (UpDown, targetList, currentTodoSelector, currentMemoSelector, updateFunction, propsContents) => {\n  let memoIdx = currentMemoSelector;\n  let todoIdx = currentTodoSelector;\n  var upDownInt = UpDown === 'up' ? -1 : 1;\n  var updateContentsList = Array.from(propsContents);\n  var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n  updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n  updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp;\n  updateFunction(updateContentsList);\n};\n/*\nMemoList 삭제\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\ncurrentMemoSelector : 현재 선택된 메모 번호\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\n\nconst deleteMemoContents = (targetList, currentTodoSelector, currentMemoSelector, propsContents) => {\n  let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n\n  for (var i = currentMemoSelector; i < propsContents[targetList][currentTodoSelector].length - 1; i++) {\n    propsContents[targetList][currentTodoSelector].memolist[i] = propsContents[targetList][currentTodoSelector].memolist[i + 1];\n  }\n\n  propsContents[targetList][currentTodoSelector].memolist = propsContents[targetList][currentTodoSelector].memolist.slice(0, memolength - 1);\n  return propsContents;\n}; // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n\n/*\nTodoList 삭제\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\n\nconst deleteTodoContents = (targetList, currentTodoSelector, propsContents) => {\n  for (var i = currentTodoSelector; i < propsContents[targetList].length - 1; i++) {\n    propsContents[targetList][i] = propsContents[targetList][i + 1];\n  }\n\n  propsContents = propsContents[targetList].slice(0, propsContents.length - 1);\n  return propsContents;\n};","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/FunctionTodoMemo.js"],"names":["swapTodoContents","UpDown","targetList","currentSelector","updateFunction","propsContents","upDownInt","updateContentsList","Array","from","temp","swapMemoContents","currentTodoSelector","currentMemoSelector","memoIdx","todoIdx","memolist","deleteMemoContents","memolength","length","i","slice","deleteTodoContents"],"mappings":"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","sourcesContent":["    \n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    const swapTodoContents =(UpDown,targetList,currentSelector,updateFunction,propsContents)=>{\n        // console.log(\"fuck ready todo swap\");\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    const swapMemoContents = (UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents)=>{\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    const deleteMemoContents =(targetList,currentTodoSelector,currentMemoSelector,propsContents)=>{\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    const deleteTodoContents=(targetList,currentTodoSelector,propsContents)=>{\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }"]},"metadata":{},"sourceType":"module"}