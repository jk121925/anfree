{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'selectorMode';\n    this.currentTodoSelector = 0;\n    this.currentMemoSelector = -1;\n    this.writeContentMode = 'todoList'; // filterTodo cursor\n\n    this.filterTodoCursorListCnt = 1;\n    this.state = {\n      pressArrowDirection: ''\n    };\n  }\n  /*\n  TodoList 위아리 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapTodoContents(UpDown, targetList, currentSelector, updateFunction, propsContents) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][currentSelector];\n    updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n    updateContentsList[targetList][currentSelector + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  Memo 위아래 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapMemoContents(UpDown, targetList, currentTodoSelector, currentMemoSelector, updateFunction, propsContents) {\n    let memoIdx = currentMemoSelector;\n    let todoIdx = currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  MemoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteMemoContents(targetList, currentTodoSelector, currentMemoSelector, propsContents) {\n    let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n\n    for (var i = currentMemoSelector; i < propsContents[targetList][currentTodoSelector].length - 1; i++) {\n      propsContents[targetList][currentTodoSelector].memolist[i] = propsContents[targetList][currentTodoSelector].memolist[i + 1];\n    }\n\n    propsContents[targetList][currentTodoSelector].memolist = propsContents[targetList][currentTodoSelector].memolist.slice(0, memolength - 1);\n    return propsContents;\n  } // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n\n  /*\n  TodoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteTodoContents(targetList, currentTodoSelector, propsContents) {\n    for (var i = currentTodoSelector; i < propsContents[targetList].length - 1; i++) {\n      propsContents[targetList][i] = propsContents[targetList][i + 1];\n    }\n\n    propsContents = propsContents[targetList].slice(0, propsContents.length - 1);\n    return propsContents;\n  }\n  /*\n  nowListNum : 현재 cursor number\n  LeftRight : 이동해야하는 방향\n  */\n\n\n  changeFilterListCnt(nowListNum, LeftRight, propsContents) {\n    if (LeftRight === 'ArrowRight') {\n      if (nowListNum === 1) {\n        if (propsContents[2].length === 0) nowListNum = 1;else nowListNum = 2;\n      } else if (nowListNum === 0) {\n        if (propsContents[1].length !== 0) nowListNum = 1;else if (propsContents[1].length === 0 && propsContents[2].length !== 0) nowListNum = 2;else nowListNum = 0;\n      }\n    } else if (LeftRight === 'ArrowLeft') {\n      if (nowListNum === 1) {\n        if (propsContents[0].length === 0) nowListNum = 1;else nowListNum = 0;\n      } else if (nowListNum === 2) {\n        if (propsContents[1].length !== 0) nowListNum = 1;else if (propsContents[1].length === 0 && propsContents[0].length !== 0) nowListNum = 0;else nowListNum = 2;\n      }\n    }\n\n    return nowListNum;\n  }\n\n  changeFilterListElement(nowListNum, LeftRight, nowListIdx, propsContents, updateFunction) {\n    let changeFilterList = Array.from(propsContents);\n    let moveIdx = -1; // 상태 변경\n\n    if (moveIdx === -1) {\n      if (LeftRight === 'ArrowRight' && nowListNum === 2) return;else if (LeftRight === 'ArrowRight' && nowListNum != 2) moveIdx = nowListNum + 1;else if (LeftRight === 'ArrowLeft' && nowListNum === 0) return;else if (LeftRight === 'ArrowLeft' && nowListNum !== 0) moveIdx = nowListNum - 1;\n    }\n\n    let changeMode = moveIdx === 0 ? 'willNotDo' : moveIdx === 1 ? 'ready' : 'willDo';\n    changeFilterList[nowListNum][nowListIdx].todoState = changeMode; // 이동시킴\n\n    changeFilterList[moveIdx].push(changeFilterList[nowListNum][nowListIdx]); // 원래 list에서 제거\n\n    for (let i = nowListIdx; i < changeFilterList[nowListNum].length - 1; i++) {\n      changeFilterList[nowListNum][i] = changeFilterList[nowListNum][i + 1];\n    }\n\n    changeFilterList[nowListNum] = changeFilterList[nowListNum].slice(0, changeFilterList[nowListNum].length - 1);\n    return updateFunction(changeFilterList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(\"controllerfiltertodolist \",this.props._contents);\n      if (this.props._stage === 'FilterTodo') {\n        // 위치변경 로직\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key; // console.log(this.props._contents);\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.filterTodoCursorListCnt][this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down', this.filterTodoCursorListCnt, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up', this.filterTodoCursorListCnt, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents[this.filterTodoCursorListCnt].length - 1) {\n              this.swapTodoContents('down', this.filterTodoCursorListCnt, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up', this.filterTodoCursorListCnt, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          } // change todoList mode\n          // todoList mode를 바꾼다. Not will Do and Will Do\n\n\n          if (_pressArrowDirection === 'ArrowLeft') {\n            this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowLeft', this.currentTodoSelector, this.props._contents, this.props.updateContentsTodoList);\n          } else if (_pressArrowDirection === 'ArrowRight') {\n            this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowRight', this.currentTodoSelector, this.props._contents, this.props.updateContentsTodoList);\n          } // this.forceUpdate();\n\n        } // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        // filterTodo 상태에서 이동제어\n        // 이동에 관한 것\n        // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        else if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              this.currentTodoSelector = this.currentTodoSelector === this.props._contents[this.filterTodoCursorListCnt].length - 1 ? this.props._contents[this.filterTodoCursorListCnt].length - 1 : this.currentTodoSelector + 1;\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n            } else if (_pressArrowDirection === 'ArrowLeft') {\n              this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowLeft\", this.props._contents);\n              this.currentTodoSelector = 0;\n            } else if (_pressArrowDirection === 'ArrowRight') {\n              this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowRight\", this.props._contents);\n              this.currentTodoSelector = 0;\n            }\n          }\n\n          this.forceUpdate();\n        } // 메모의 상태를 변경하기 위해서 사용\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') {\n            this.writeContentMode = 'memoList';\n            this.currentMemoSelector = 0;\n          } else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n\n          e.target.value = \"\";\n          this.forceUpdate();\n        }\n      }\n    });\n  }\n\n  render() {\n    // console.log(\"render time \" ,this.props._contents);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDiveFilter, {\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _filterTodoCursorListCnt: this.filterTodoCursorListCnt,\n        _filterTodoCursorList: this.props._contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","currentTodoSelector","currentMemoSelector","writeContentMode","filterTodoCursorListCnt","state","pressArrowDirection","swapTodoContents","UpDown","targetList","currentSelector","updateFunction","propsContents","upDownInt","updateContentsList","Array","from","temp","swapMemoContents","memoIdx","todoIdx","memolist","deleteMemoContents","memolength","length","i","slice","deleteTodoContents","changeFilterListCnt","nowListNum","LeftRight","changeFilterListElement","nowListIdx","changeFilterList","moveIdx","changeMode","todoState","push","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","_contents","updateContentsTodoList","nowMemolist","forceUpdate","target","value"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'selectorMode';\n        this.currentTodoSelector = 0;\n        this.currentMemoSelector = -1;\n        this.writeContentMode = 'todoList'\n        // filterTodo cursor\n        this.filterTodoCursorListCnt =1;     \n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n\n    /*\n    nowListNum : 현재 cursor number\n    LeftRight : 이동해야하는 방향\n    */\n    changeFilterListCnt(nowListNum, LeftRight, propsContents){\n        if(LeftRight === 'ArrowRight'){\n            if(nowListNum === 1) {\n                if(propsContents[2].length ===0) nowListNum =1;\n                else nowListNum = 2;\n            }\n            else if(nowListNum === 0){\n                if(propsContents[1].length !==0) nowListNum = 1;\n                else if(propsContents[1].length ===0 && propsContents[2].length!==0) nowListNum = 2;\n                else nowListNum =0;\n            }\n        }\n        else if(LeftRight === 'ArrowLeft'){\n            if(nowListNum === 1) {\n                if(propsContents[0].length ===0) nowListNum =1;\n                else nowListNum =0;\n            }\n            else if(nowListNum ===2){\n                if(propsContents[1].length!==0) nowListNum =1;\n                else if(propsContents[1].length === 0 && propsContents[0].length!==0) nowListNum =0;\n                else nowListNum = 2;\n            }\n        }\n        return nowListNum;\n    }\n\n    changeFilterListElement(nowListNum, LeftRight, nowListIdx , propsContents, updateFunction){\n        \n        let changeFilterList = Array.from(propsContents);\n        let moveIdx =-1;\n        // 상태 변경\n        if(moveIdx === -1){\n            if(LeftRight === 'ArrowRight' && nowListNum === 2 ) return;\n            else if(LeftRight === 'ArrowRight' && nowListNum !=2 ) moveIdx = nowListNum+1;\n            else if(LeftRight === 'ArrowLeft' && nowListNum === 0 ) return;\n            else if(LeftRight === 'ArrowLeft' && nowListNum !== 0  )moveIdx = nowListNum-1;\n        }\n\n        let changeMode =(moveIdx === 0 )? 'willNotDo' : ((moveIdx === 1) ? 'ready' : 'willDo');\n        changeFilterList[nowListNum][nowListIdx].todoState = changeMode;\n        // 이동시킴\n        changeFilterList[moveIdx].push(changeFilterList[nowListNum][nowListIdx]);\n        // 원래 list에서 제거\n        for(let i=nowListIdx; i<changeFilterList[nowListNum].length-1; i++){\n            changeFilterList[nowListNum][i] = changeFilterList[nowListNum][i+1];\n        }\n        changeFilterList[nowListNum] = changeFilterList[nowListNum].slice(0, changeFilterList[nowListNum].length-1);\n        return updateFunction(changeFilterList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(\"controllerfiltertodolist \",this.props._contents);\n            if(this.props._stage === 'FilterTodo'){\n\n                // 위치변경 로직\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n                    // console.log(this.props._contents);\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.filterTodoCursorListCnt][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[this.filterTodoCursorListCnt].length-1){\n                            this.swapTodoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }\n\n                    // change todoList mode\n                    // todoList mode를 바꾼다. Not will Do and Will Do\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowLeft', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowRight', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }\n\n                    \n                    // this.forceUpdate();\n                }\n\n\n\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                // filterTodo 상태에서 이동제어\n                // 이동에 관한 것\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                else if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[this.filterTodoCursorListCnt].length-1)? this.props._contents[this.filterTodoCursorListCnt].length-1 : this.currentTodoSelector+1;                        \n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                        }else if(_pressArrowDirection === 'ArrowLeft'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowLeft\",this.props._contents);\n                            this.currentTodoSelector =0;\n                        }else if(_pressArrowDirection === 'ArrowRight'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowRight\",this.props._contents);\n                            this.currentTodoSelector =0;\n                        }\n                    }\n                    this.forceUpdate();\n                }\n\n\n                // 메모의 상태를 변경하기 위해서 사용\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') {\n                        this.writeContentMode = 'memoList';\n                        this.currentMemoSelector = 0;\n                    }\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n                \n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        // console.log(\"render time \" ,this.props._contents);\n        return(\n            <div className=\"FilterTodo\">\n            <RenderTodoMemoDiveFilter\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n                _filterTodoCursorList = {this.props._contents}\n            ></RenderTodoMemoDiveFilter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}