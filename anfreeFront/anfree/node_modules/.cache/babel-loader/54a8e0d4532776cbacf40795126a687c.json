{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'writeMode'; // writeContentMode : todoList, memoList\n\n    this.writeContentMode = 'todoList';\n    this.currentTodoSelector = -1;\n    this.currentMemoSelector = -1;\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapTodoContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentTodoSelector];\n    updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector + upDownInt];\n    updateContentsList[this.currentTodoSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  swapMemoContents(upDown) {}\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n        var _pressArrowDirection = e.key;\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          let memolength = this.props._contents[this.currentTodoSelector].length;\n\n          if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n            this.swapMemoContents('down');\n          } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n            this.swapMemoContents('up');\n          }\n        } else {\n          if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n            this.swapTodoContents('down');\n          } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n            this.swapTodoContents('up');\n          }\n        }\n      }\n      /**\n       * 메모기능 구현\n       * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n       * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n       * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n       * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n       * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n       */\n\n\n      if (this.actionMode === 'selectorMode' && e.key === '/') {\n        if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else {\n          this.writeContentMode = 'todoList';\n          this.currentMemoSelector = -1;\n        }\n        e.target.value = \"\";\n        this.forceUpdate();\n      }\n      /*\n          delete 기능 구현\n      */\n\n\n      if (e.shiftKey && e.key === 'Delete') {\n        var _deleteContents = Array.from(this.props._contents);\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n\n          if (memolength !== 0) {\n            for (var i = this.currentMemoSelector; i < memo - 1; i++) {\n              _deleteContents[this.currentTodoSelector].memolist[i] = _deleteContents[this.currentTodoSelector].memolist[i + 1];\n            }\n\n            _deleteContents[this.currentTodoSelector].memolist = _deleteContents[this.currentTodoSelector].memolist.slice(0, memolength - 1);\n\n            if (this.currentMemoSelector === memolength - 1) {\n              this.currentMemoSelector = this.currentMemoSelector - 1;\n            }\n          }\n        } else {\n          if (this.props._contents.length === 1) {\n            _deleteContents = [];\n            this.currentTodoSelector = this.currentTodoSelector - 1;\n            this.mode = 'writeMode';\n          } else if (this.props._contents.length !== 0) {\n            for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n              _deleteContents[i] = _deleteContents[i + 1];\n            }\n\n            _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n            if (this.currentTodoSelector === this.props._contents.length - 1) {\n              this.currentTodoSelector = this.currentTodoSelector - 1;\n            }\n          }\n        }\n\n        this.props.updateContentsTodoList(_deleteContents);\n      }\n      /*\n          writeMode vs selectorMode \n          selectorMode면 움직이고 있는 중입니다.\n      */\n\n\n      if (37 <= e.keyCode && e.keyCode <= 40) {\n        var _pressArrowDirection = e.key;\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          //controll memo mode\n          let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n          if (_pressArrowDirection === 'ArrowDown') {\n            if (nowMemolist.length !== 0) {\n              this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n            }\n          } else if (_pressArrowDirection === 'ArrowUp') {\n            if (nowMemolist.length !== 0) {\n              this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n            }\n          }\n        } else {\n          //controll todo mode\n          if (_pressArrowDirection === 'ArrowDown') {\n            if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n              this.currentTodoSelector = 0;\n              this.actionMode = 'selectorMode';\n            } else if (this.actionMode === 'selectorMode') {\n              this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n            }\n          } else if (_pressArrowDirection === 'ArrowUp') {\n            if (this.actionMode === 'selectorMode') {\n              if (this.currentTodoSelector === 0) {\n                this.actionMode = 'writeMode';\n              } else {\n                this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n              }\n            }\n          }\n        }\n\n        this.forceUpdate();\n      } //end arrow if test\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(TodoMemoDivRender, {\n      _contents: this.props._contents,\n      _mode: this.actionMode,\n      _currentTodoSelector: this.currentTodoSelector,\n      _currentMemoSelector: this.currentMemoSelector,\n      _writeContentMode: this.writeContentMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js"],"names":["render","React","Component","memo","TodoMemoDivRender","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","currentMemoSelector","state","pressShiftCnt","pressArrowDirection","swapTodoContents","UpDown","upDownInt","updateContentsList","Array","from","_contents","temp","updateContentsTodoList","swapMemoContents","upDown","componentDidMount","window","addEventListener","e","shiftKey","keyCode","_pressArrowDirection","key","memolength","length","target","value","forceUpdate","_deleteContents","memolist","i","slice","mode","nowMemolist"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    swapMemoContents(upDown){\n\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = this.props._contents[this.currentTodoSelector].length;\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                        this.swapMemoContents('down');\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                        this.swapMemoContents('up');\n                    }\n                }else{\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                        this.swapTodoContents('down');\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                        this.swapTodoContents('up');\n                    }\n                }\n\n\n\n                \n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else {\n                    this.writeContentMode = 'todoList';\n                    this.currentMemoSelector = -1;\n                }\n                e.target.value = \"\";\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n\n\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                    if( memolength!==0){\n                        for(var i = this.currentMemoSelector; i<memo-1; i++){\n                            _deleteContents[this.currentTodoSelector].memolist[i] = \n                            _deleteContents[this.currentTodoSelector].memolist[i+1]\n                        }\n                        _deleteContents[this.currentTodoSelector].memolist=\n                        _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                        if(this.currentMemoSelector=== memolength-1){\n                            this.currentMemoSelector = this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    if(this.props._contents.length ===1){\n                        _deleteContents = []\n                        this.currentTodoSelector = this.currentTodoSelector-1;\n                        this.mode = 'writeMode'\n                    }\n                    else if(this.props._contents.length !==0){\n                        for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                            _deleteContents[i] = _deleteContents[i+1];\n                        }\n                        _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                        if(this.currentTodoSelector === this.props._contents.length-1){\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                        }\n                    }\n                }\n                \n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    //controll memo mode\n                    let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        \n                        if(nowMemolist.length !== 0){\n                            this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(nowMemolist.length!==0){\n                            this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    //controll todo mode\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                            this.currentTodoSelector = 0;\n                            this.actionMode = 'selectorMode'\n                        }else if(this.actionMode === 'selectorMode'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(this.actionMode === 'selectorMode'){\n                            if(this.currentTodoSelector === 0){\n                                this.actionMode ='writeMode'\n                            }else{\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                }\n                \n                this.forceUpdate();\n            }//end arrow if test\n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <TodoMemoDivRender \n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentTodoSelector = {this.currentTodoSelector}\n            _currentMemoSelector = {this.currentMemoSelector}\n            _writeContentMode = {this.writeContentMode}\n            ></TodoMemoDivRender>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}