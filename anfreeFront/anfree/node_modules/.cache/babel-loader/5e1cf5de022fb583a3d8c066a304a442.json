{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDivReady from \"./RenderTodoMemoDivReady\";\nimport moveLogic from \"./FunctionTodoMemo.js\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'writeMode'; // writeContentMode : todoList, memoList\n\n    this.writeContentMode = 'todoList'; // TodoList controll selector\n\n    this.currentTodoSelector = -1;\n    this.currentMemoSelector = -1;\n    this.currentListIndex = 1; // filterTodo cursor\n\n    this.state = {\n      pressArrowDirection: ''\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n        var _pressArrowDirection = e.key;\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n\n          if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n            moveLogic.swapMemoContents('down', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n          } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n            moveLogic.swapMemoContents('up', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n          }\n        } else {\n          if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents[1].length - 1) {\n            moveLogic.swapTodoContents('down', 1, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n          } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n            moveLogic.swapTodoContents('up', 1, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n          }\n        }\n      }\n      /**\n       * 메모기능 구현\n       * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n       * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n       * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n       * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n       * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n       */\n\n\n      if (this.actionMode === 'selectorMode' && e.key === '/') {\n        if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else {\n          this.writeContentMode = 'todoList';\n          this.currentMemoSelector = -1;\n        }\n        e.target.value = \"\";\n        this.forceUpdate();\n      }\n      /*\n          delete 기능 구현\n      */\n\n\n      if (e.shiftKey && e.key === 'Delete') {\n        var _deleteContents = Array.from(this.props._contents);\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          if (_deleteContents[1][this.currentTodoSelector].memolist.lengt !== 0) {\n            _deleteContents = moveLogic.deleteMemoContents(1, this.currentTodoSelector, this.currentMemoSelector, _deleteContents);\n\n            if (this.currentMemoSelector === _deleteContents[1][this.currentTodoSelector].memolist.lengt - 1) {\n              this.currentMemoSelector = this.currentMemoSelector - 1;\n            }\n          }\n        } else {\n          if (_deleteContents.length === 1) {\n            _deleteContents[1] = [];\n            this.currentTodoSelector = this.currentTodoSelector - 1;\n            this.mode = 'writeMode';\n          } else if (_deleteContents.length !== 0) {\n            _deleteContents = moveLogic.deleteTodoContents(1, this.currentTodoSelector, _deleteContents);\n\n            if (this.currentTodoSelector === _deleteContents[1].length - 1) {\n              this.currentTodoSelector = this.currentTodoSelector - 1;\n            }\n          }\n        }\n\n        this.props.updateContentsTodoList(_deleteContents);\n      }\n      /*\n          writeMode vs selectorMode \n          위아래로 커서 변경하는 상황\n          ************************* need refactorying **********************\n      */\n\n\n      if (37 <= e.keyCode && e.keyCode <= 40) {\n        var _pressArrowDirection = e.key;\n\n        if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n          //controll memo mode\n          let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n\n          if (_pressArrowDirection === 'ArrowDown') {\n            if (nowMemolist.length !== 0) {\n              this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n            }\n          } else if (_pressArrowDirection === 'ArrowUp') {\n            if (nowMemolist.length !== 0) {\n              this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n            }\n          }\n        } else {\n          //controll todo mode\n          if (_pressArrowDirection === 'ArrowDown') {\n            if (this.actionMode === 'writeMode' && this.props._contents[1].length !== 0) {\n              this.currentTodoSelector = 0;\n              this.actionMode = 'selectorMode';\n            } else if (this.actionMode === 'selectorMode') {\n              this.currentTodoSelector = this.currentTodoSelector === this.props._contents[1].length - 1 ? this.props._contents[1].length - 1 : this.currentTodoSelector + 1;\n            }\n          } else if (_pressArrowDirection === 'ArrowUp') {\n            if (this.actionMode === 'selectorMode') {\n              if (this.currentTodoSelector === 0) {\n                this.actionMode = 'writeMode';\n              } else {\n                this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n              }\n            }\n          }\n        }\n\n        this.forceUpdate();\n      } //end arrow if test\n\n    });\n  } // componentWillUnmount(){\n  //     console.log(\"ControllerReadyTodoList willUnmount\");\n  //     window.removeEventListener(\"keydown\");\n  //     console.log(\"remove Event Listener\");\n  // }\n\n\n  render() {\n    // console.log(this.props._stage);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EnterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDivReady, {\n        _contents: this.props._contents[1],\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDivReady","moveLogic","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","currentMemoSelector","currentListIndex","state","pressArrowDirection","componentDidMount","window","addEventListener","e","shiftKey","keyCode","_pressArrowDirection","key","memolength","_contents","memolist","length","swapMemoContents","updateContentsTodoList","swapTodoContents","target","value","forceUpdate","_deleteContents","Array","from","lengt","deleteMemoContents","mode","deleteTodoContents","nowMemolist"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivReady from \"./RenderTodoMemoDivReady\";\nimport moveLogic from \"./FunctionTodoMemo.js\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.currentListIndex = 1;\n        // filterTodo cursor\n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    \n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                        moveLogic.swapMemoContents('down',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                        moveLogic.swapMemoContents('up',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }\n                }else{\n                    if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[1].length-1){\n                        moveLogic.swapTodoContents('down',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                        moveLogic.swapTodoContents('up',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                    }\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else {\n                    this.writeContentMode = 'todoList';\n                    this.currentMemoSelector = -1;\n                }\n                e.target.value = \"\";\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    if(_deleteContents[1][this.currentTodoSelector].memolist.lengt!==0){\n                        _deleteContents = moveLogic.deleteMemoContents(1,this.currentTodoSelector,this.currentMemoSelector,_deleteContents);\n                        if(this.currentMemoSelector=== _deleteContents[1][this.currentTodoSelector].memolist.lengt-1){\n                            this.currentMemoSelector = this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    if(_deleteContents.length ===1){\n                        _deleteContents[1] = []\n                        this.currentTodoSelector = this.currentTodoSelector-1;\n                        this.mode = 'writeMode'\n                    }\n                    else if(_deleteContents.length !==0){\n                        _deleteContents = moveLogic.deleteTodoContents(1,this.currentTodoSelector,_deleteContents);\n                        if(this.currentTodoSelector === _deleteContents[1].length-1){\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                        }\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                위아래로 커서 변경하는 상황\n                ************************* need refactorying **********************\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                \n                if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                    //controll memo mode\n                    let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        \n                        if(nowMemolist.length !== 0){\n                            this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(nowMemolist.length!==0){\n                            this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                        }\n                    }\n                }else{\n                    //controll todo mode\n                    if(_pressArrowDirection === 'ArrowDown'){\n                        if(this.actionMode==='writeMode' && this.props._contents[1].length!==0){\n                            this.currentTodoSelector = 0;\n                            this.actionMode = 'selectorMode'\n                        }else if(this.actionMode === 'selectorMode'){\n                            this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[1].length-1)? this.props._contents[1].length-1 : this.currentTodoSelector+1;                        \n                        }\n                    }else if(_pressArrowDirection === 'ArrowUp'){\n                        if(this.actionMode === 'selectorMode'){\n                            if(this.currentTodoSelector === 0){\n                                this.actionMode ='writeMode'\n                            }else{\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n        })\n    }\n\n\n    // componentWillUnmount(){\n    //     console.log(\"ControllerReadyTodoList willUnmount\");\n    //     window.removeEventListener(\"keydown\");\n    //     console.log(\"remove Event Listener\");\n    // }\n\n\n    render(){\n        // console.log(this.props._stage);\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivReady\n                _contents={this.props._contents[1]}\n                _mode = {this.actionMode}\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _writeContentMode = {this.writeContentMode}\n                ></RenderTodoMemoDivReady>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}