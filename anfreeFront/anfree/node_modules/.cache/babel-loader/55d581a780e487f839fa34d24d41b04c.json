{"ast":null,"code":"/*\nTodoList 위아리 바꾸기\nUpDonw : 위인지 아래인지\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\nupdateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\nexport const swapTodoContents = (UpDown, targetList, currentSelector, propsContents) => {\n  var upDownInt = UpDown === 'up' ? -1 : 1;\n  var updateContentsList = Array.from(propsContents);\n  var temp = updateContentsList[targetList][currentSelector];\n  updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n  updateContentsList[targetList][currentSelector + upDownInt] = temp; // updateFunction(updateContentsList);\n\n  return updateContentsList;\n};\n/*\nMemo 위아래 바꾸기\nUpDonw : 위인지 아래인지\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\ncurrentMemoSelector : 현재 선택된 메모 번호\nupdateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\nexport const swapMemoContents = (UpDown, targetList, currentTodoSelector, currentMemoSelector, propsContents) => {\n  let memoIdx = currentMemoSelector;\n  let todoIdx = currentTodoSelector;\n  var upDownInt = UpDown === 'up' ? -1 : 1;\n  var updateContentsList = Array.from(propsContents);\n  var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n  updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n  updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp; // updateFunction(updateContentsList);\n\n  return updateContentsList;\n};\n/*\nMemoList 삭제\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\ncurrentMemoSelector : 현재 선택된 메모 번호\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\nexport const deleteMemoContents = (targetList, currentTodoSelector, currentMemoSelector, propsContents) => {\n  let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n\n  for (var i = currentMemoSelector; i < propsContents[targetList][currentTodoSelector].length - 1; i++) {\n    propsContents[targetList][currentTodoSelector].memolist[i] = propsContents[targetList][currentTodoSelector].memolist[i + 1];\n  }\n\n  propsContents[targetList][currentTodoSelector].memolist = propsContents[targetList][currentTodoSelector].memolist.slice(0, memolength - 1);\n  return propsContents;\n}; // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n\n/*\nTodoList 삭제\ntargetList : 지우고자 하는 list => 0,1,2\ncurrentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\npropsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n*/\n\nexport const deleteTodoContents = (listSelector, todoSelector, todoList) => {\n  let nextTodoSelector = todoSelector == todoList[listSelector].length - 1 ? todoSelector - 1 : todoSelector;\n\n  for (var i = todoSelector; i < todoList[listSelector].length - 1; i++) {\n    todoList[listSelector][i] = todoList[listSelector][i + 1];\n  }\n\n  todoList = todoList[listSelector].slice(0, todoList.length - 1);\n  return [listSelector, nextTodoSelector, deleteTodoList];\n};\n\nconst moveUpAndDown = (todoSelector, listSelector, pressedKey, todoList) => {\n  let nextTodoSelector;\n\n  if (pressedKey.key === 'ArrowUP') {\n    nextTodoSelector = todoSelector !== 0 ? todoSelector - 1 : todoSelector;\n  } else if (pressedKey.key === 'ArrowDonw') {\n    nextTodoSelector = todoSelector != todoList[listSelector].length - 1 ? todoSelector + 1 : todoSelector;\n  }\n\n  return [listSelector, nextTodoSelector];\n}; //return next TodoSelector from pressedKey\n//return [listSelector, todoSelector]\n\n\nexport const moveTodoContents = (todoSelector, listSelector, pressedKey, nowStage, todoList) => {\n  if (nowStage == 0) {\n    if (pressedKey.key === 'ArrowUP' || pressedKey.key === 'ArrowDown') {\n      return moveUpAndDown(todoSelector, listSelector, pressedKey, todoList);\n    }\n  } else if (nowStage === 1) {\n    if (pressedKey.key === 'ArrowUP' || pressedKey.key === 'ArrowDown') {\n      return moveUpAndDown(todoSelector, listSelector, pressedKey, todoList);\n    } else if (pressedKey.key == 'ArrowRight' || pressedKey.key == 'ArrowLeft') {\n      let nextTodoSelector = 0;\n      let nextListSelctor;\n\n      if (pressedKey.key === 'ArrowRight') {\n        nextListSelctor = listSelector != 2 ? nextListSelctor + 1 : nextListSelctor;\n      } else if (pressedKey.key === 'ArrowLeft') {\n        nextListSelctor = listSelector != 0 ? nextListSelctor - 1 : nextListSelctor;\n      }\n\n      return [nextListSelctor, nextTodoSelector];\n    }\n  } else if (nowStage === 2) {\n    if (pressedKey.key === 'ArrowUP' || pressedKey.key === 'ArrowDown') {\n      return moveUpAndDown(todoSelector, listSelector, pressedKey, todoList);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/FunctionTodoMemo.js"],"names":["swapTodoContents","UpDown","targetList","currentSelector","propsContents","upDownInt","updateContentsList","Array","from","temp","swapMemoContents","currentTodoSelector","currentMemoSelector","memoIdx","todoIdx","memolist","deleteMemoContents","memolength","length","i","slice","deleteTodoContents","listSelector","todoSelector","todoList","nextTodoSelector","deleteTodoList","moveUpAndDown","pressedKey","key","moveTodoContents","nowStage","nextListSelctor"],"mappings":"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","sourcesContent":["    \n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    export const swapTodoContents =(UpDown,targetList,currentSelector,propsContents)=>{\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        // updateFunction(updateContentsList);\n        return updateContentsList;\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    export const swapMemoContents = (UpDown,targetList,currentTodoSelector,currentMemoSelector,propsContents)=>{\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        // updateFunction(updateContentsList);\n        return updateContentsList;\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    export const deleteMemoContents =(targetList,currentTodoSelector,currentMemoSelector,propsContents)=>{\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    export const deleteTodoContents=(listSelector,todoSelector,todoList)=>{\n        let nextTodoSelector = (todoSelector == todoList[listSelector].length-1)? todoSelector-1 : todoSelector;\n        for(var i=todoSelector; i<todoList[listSelector].length-1; i++){\n            todoList[listSelector][i] = todoList[listSelector][i+1];\n        }\n        todoList = todoList[listSelector].slice(0,todoList.length-1);\n        return [listSelector,nextTodoSelector, deleteTodoList];\n    }\n\n\n    const moveUpAndDown = (todoSelector,listSelector,pressedKey,todoList)=>{\n        let nextTodoSelector;\n        if(pressedKey.key === 'ArrowUP'){\n            nextTodoSelector = (todoSelector !==0) ? todoSelector-1 : todoSelector;\n        }\n        else if(pressedKey.key === 'ArrowDonw'){\n            nextTodoSelector = (todoSelector !=todoList[listSelector].length-1)? todoSelector+1 : todoSelector;\n        }\n        return [listSelector,nextTodoSelector]\n    }\n\n\n\n    //return next TodoSelector from pressedKey\n    //return [listSelector, todoSelector]\n    export const moveTodoContents = (todoSelector,listSelector, pressedKey, nowStage, todoList)=>{\n        if(nowStage == 0){\n            if(pressedKey.key === 'ArrowUP' || pressedKey.key === 'ArrowDown'){\n                return moveUpAndDown(todoSelector,listSelector,pressedKey,todoList);\n            }\n            \n        }\n        else if(nowStage === 1){\n            if(pressedKey.key === 'ArrowUP' || pressedKey.key ==='ArrowDown'){\n                return moveUpAndDown(todoSelector,listSelector,pressedKey,todoList);\n            }else if(pressedKey.key =='ArrowRight' || pressedKey.key == 'ArrowLeft'){\n                let nextTodoSelector =0 ; let nextListSelctor;\n                if(pressedKey.key === 'ArrowRight'){\n                    nextListSelctor = (listSelector !=2)? nextListSelctor+1 : nextListSelctor;\n                }else if(pressedKey.key === 'ArrowLeft'){\n                    nextListSelctor = (listSelector !=0)? nextListSelctor-1 : nextListSelctor;\n                }\n                return [nextListSelctor, nextTodoSelector]\n            }\n        }\n        else if(nowStage === 2){\n            if(pressedKey.key === 'ArrowUP' || pressedKey.key === 'ArrowDown'){\n                return moveUpAndDown(todoSelector,listSelector,pressedKey,todoList);\n            }\n        }\n    }"]},"metadata":{},"sourceType":"module"}