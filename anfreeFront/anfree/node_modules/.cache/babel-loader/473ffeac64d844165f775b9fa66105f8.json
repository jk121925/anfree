{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementFilter.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderTodoMemoDiveFilter(_ref) {\n  _s();\n\n  let {\n    _mode,\n    _currentTodoSelector,\n    _currentMemoSelector,\n    _filterTodoCursorListCnt,\n    _filterTodoCursorList\n  } = _ref;\n  const [preContents, AfterContents] = useState(_contents);\n  let filteredList = [];\n\n  const setAfterContents = update => {\n    AfterContents(update);\n  }; // make memo <div> list\n  // 메모 리스트를 만드는 component\n\n\n  const makeMemoDivList = (memoListByContent, __currentMemoSelector) => {\n    return memoListByContent.map((memoElement, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: __currentMemoSelector === index ? \"memoElement-now\" : \"memoElement\",\n      children: memoElement\n    }, i + memoElement, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this));\n  }; // __i => 0 - willNotDoList,1 - readyList ,2 - willDoList\n\n\n  const makeFilterdTodoDivList = (__i, __filteredList, __filterTodoCursorListCnt, __currentTodoSelector, __currentMemoSelector) => {\n    let tempArr = [];\n    let i = 0;\n    let setClassName = __i === 0 ? \"willNotDo\" : __i === 1 ? \"ready\" : \"willDo\";\n\n    while (i < __filteredList[__i].length) {\n      if (__i === __filterTodoCursorListCnt && i === __currentTodoSelector) setClassName = setClassName + \"-now\";\n      tempArr.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: setClassName,\n        children: [__filteredList[__i][i].todolist, makeMemoDivList(__filteredList[__i][i].memolist, __currentMemoSelector)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this));\n      i = i + 1;\n    }\n  };\n\n  var i = 0;\n\n  if (_mode === 'selectorMode') {\n    while (i < renderContainer.length) {\n      if (renderContainer[i].todoState === \"ready\") {\n        if (_currentTodoSelector !== -1 && i === _currentTodoSelector) {\n          readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ready-now\",\n            children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, _currentMemoSelector)]\n          }, renderContainer[i].todolist, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this));\n        } else {\n          readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ready\",\n            children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n          }, renderContainer[i].todolist, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this));\n        }\n      } else if (renderContainer[i].todoState === \"NotWillDo\") {\n        console.log(\"renderContainer willNotDo: \", renderContainer[i]);\n        willNotDoList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WillNotDo\",\n          children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n        }, renderContainer[i].todolist, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this));\n      } else {\n        console.log(\"renderContainer WillDo: \", renderContainer[i]);\n        willDoList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WillDo\",\n          children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n        }, renderContainer[i].todolist, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this));\n      }\n\n      i = i + 1;\n    } //end while\n\n  } else {\n    while (i < renderContainer.length) {\n      readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoMainElement\",\n        children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n      }, renderContainer[i].todolist, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this));\n      i = i + 1;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filterDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"willNotDoListDiv\",\n      children: willNotDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"readyDiv\",\n      children: readyList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"willDoListDiv\",\n      children: willDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderTodoMemoDiveFilter, \"BmVK3FTFSWSFaJR3qCfacxVLgHI=\");\n\n_c = RenderTodoMemoDiveFilter;\n;\nexport default RenderTodoMemoDiveFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderTodoMemoDiveFilter\");","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoMemoDiveFilter.js"],"names":["React","useState","RenderMemoInput","RenderTodoMemoDiveFilter","_mode","_currentTodoSelector","_currentMemoSelector","_filterTodoCursorListCnt","_filterTodoCursorList","preContents","AfterContents","_contents","filteredList","setAfterContents","update","makeMemoDivList","memoListByContent","__currentMemoSelector","map","memoElement","index","i","makeFilterdTodoDivList","__i","__filteredList","__filterTodoCursorListCnt","__currentTodoSelector","tempArr","setClassName","length","push","todolist","memolist","renderContainer","todoState","readyList","console","log","willNotDoList","willDoList"],"mappings":"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","sourcesContent":["import React ,{useState}from \"react\";\nimport RenderMemoInput from \"./RenderMemoInput\";\nimport \"./RenderTodoElementFilter.css\"\n\nfunction RenderTodoMemoDiveFilter({_mode,_currentTodoSelector,_currentMemoSelector,_filterTodoCursorListCnt,_filterTodoCursorList}){\n    const [preContents, AfterContents] = useState(_contents);\n    let filteredList =[];\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    // make memo <div> list\n    // 메모 리스트를 만드는 component\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    // __i => 0 - willNotDoList,1 - readyList ,2 - willDoList\n    const makeFilterdTodoDivList =(__i,__filteredList,__filterTodoCursorListCnt,__currentTodoSelector,__currentMemoSelector)=>{\n        let tempArr =[]; let i=0;\n        let setClassName = (__i === 0) ? \"willNotDo\" : ((__i === 1) ? \"ready\" : \"willDo\");\n\n        while(i<__filteredList[__i].length){\n            if(__i === __filterTodoCursorListCnt && i === __currentTodoSelector) setClassName = setClassName + \"-now\";\n            tempArr.push(\n                <div className={setClassName}>\n                    {__filteredList[__i][i].todolist}\n                    {makeMemoDivList(__filteredList[__i][i].memolist,__currentMemoSelector)}\n                </div>\n            )\n            i = i+1;\n        }\n    }\n\n\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(renderContainer[i].todoState ===\"ready\"){\n                if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                        readyList.push(\n                            <div className=\"ready-now\" key={renderContainer[i].todolist}>\n                                {renderContainer[i].todolist}\n                                {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                            </div>\n                        );\n                    }\n                    else{\n                        readyList.push(\n                            <div className=\"ready\" key={renderContainer[i].todolist}>\n                                {renderContainer[i].todolist}\n                                {makeMemoDivList(renderContainer[i].memolist,-1)}\n                            </div>\n                        );\n                    }\n            }else if(renderContainer[i].todoState ===\"NotWillDo\"){\n                console.log(\"renderContainer willNotDo: \", renderContainer[i])\n                willNotDoList.push(\n                    <div className=\"WillNotDo\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }else{\n                console.log(\"renderContainer WillDo: \", renderContainer[i])\n                willDoList.push(\n                    <div className=\"WillDo\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            readyList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        <div className=\"filterDiv\">\n            <div className=\"willNotDoListDiv\">\n                {willNotDoList}\n            </div>\n            <div className=\"readyDiv\">\n                {readyList}\n            </div>\n            <div className=\"willDoListDiv\">\n                {willDoList}\n            </div>\n        </div>\n    );\n};\n\nexport default RenderTodoMemoDiveFilter; "]},"metadata":{},"sourceType":"module"}