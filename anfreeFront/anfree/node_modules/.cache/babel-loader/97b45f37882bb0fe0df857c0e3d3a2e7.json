{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'writeMode'; // writeContentMode : todoList, memoList\n\n    this.writeContentMode = 'todoList'; // TodoList controll selector\n\n    this.currentTodoSelector = -1;\n    this.currentMemoSelector = -1;\n    this.currentListIndex = 1; // filterTodo cursor\n\n    this.state = {\n      pressArrowDirection: ''\n    };\n  }\n  /*\n  TodoList 위아리 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapTodoContents(UpDown, targetList, currentSelector, updateFunction, propsContents) {\n    // console.log(\"fuck ready todo swap\");\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][currentSelector];\n    updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n    updateContentsList[targetList][currentSelector + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  Memo 위아래 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapMemoContents(UpDown, targetList, currentTodoSelector, currentMemoSelector, updateFunction, propsContents) {\n    let memoIdx = currentMemoSelector;\n    let todoIdx = currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  MemoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteMemoContents(targetList, currentTodoSelector, currentMemoSelector, propsContents) {\n    let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n\n    for (var i = currentMemoSelector; i < propsContents[targetList][currentTodoSelector].length - 1; i++) {\n      propsContents[targetList][currentTodoSelector].memolist[i] = propsContents[targetList][currentTodoSelector].memolist[i + 1];\n    }\n\n    propsContents[targetList][currentTodoSelector].memolist = propsContents[targetList][currentTodoSelector].memolist.slice(0, memolength - 1);\n    return propsContents;\n  } // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n\n  /*\n  TodoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteTodoContents(targetList, currentTodoSelector, propsContents) {\n    for (var i = currentTodoSelector; i < propsContents[targetList].length - 1; i++) {\n      propsContents[targetList][i] = propsContents[targetList][i + 1];\n    }\n\n    propsContents = propsContents[targetList].slice(0, propsContents.length - 1);\n    return propsContents;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.stage === nextProps.stage) {\n      console.log(\"render\");\n      return true;\n    }\n\n    console.log(\"no render\");\n    return false;\n  }\n\n  componentDidMount() {\n    // console.log(\"ready fuck\");\n    window.addEventListener('keydown', e => {\n      // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n\n      /*\n          위아래로 swap하는 기능 구현\n      */\n      if (this.props._stage === 'EnterTodo') {\n        console.log(\"controllerReadyTodoList : componentDidMount start------------------------\");\n        console.log(this.props._stage);\n\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up', 1, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents[1].length - 1) {\n              this.swapTodoContents('down', 1, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up', 1, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          }\n        }\n        /**\n         * 메모기능 구현\n         * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n         * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n         * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n         * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n         * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n         */\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n          e.target.value = \"\";\n          this.forceUpdate();\n        }\n        /*\n            delete 기능 구현\n        */\n\n\n        if (e.shiftKey && e.key === 'Delete') {\n          var _deleteContents = Array.from(this.props._contents);\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            if (_deleteContents[1][this.currentTodoSelector].memolist.lengt !== 0) {\n              _deleteContents = this.deleteMemoContents(1, this.currentTodoSelector, this.currentMemoSelector, _deleteContents);\n\n              if (this.currentMemoSelector === _deleteContents[1][this.currentTodoSelector].memolist.lengt - 1) {\n                this.currentMemoSelector = this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            if (_deleteContents.length === 1) {\n              _deleteContents[1] = [];\n              this.currentTodoSelector = this.currentTodoSelector - 1;\n              this.mode = 'writeMode';\n            } else if (_deleteContents.length !== 0) {\n              _deleteContents = this.deleteTodoContents(1, this.currentTodoSelector, _deleteContents);\n\n              if (this.currentTodoSelector === _deleteContents[1].length - 1) {\n                this.currentTodoSelector = this.currentTodoSelector - 1;\n              }\n            }\n          }\n\n          this.props.updateContentsTodoList(_deleteContents);\n        }\n        /*\n            writeMode vs selectorMode \n            위아래로 커서 변경하는 상황\n            ************************* need refactorying **********************\n        */\n\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.actionMode === 'writeMode' && this.props._contents[1].length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents[1].length - 1 ? this.props._contents[1].length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                if (this.currentTodoSelector === 0) {\n                  this.actionMode = 'writeMode';\n                } else {\n                  this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n                }\n              }\n            }\n          }\n\n          this.forceUpdate();\n        } //end arrow if test\n\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EnterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDivEnter, {\n        _contents: this.props._contents[1],\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerReadyTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDivEnter","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","currentMemoSelector","currentListIndex","state","pressArrowDirection","swapTodoContents","UpDown","targetList","currentSelector","updateFunction","propsContents","upDownInt","updateContentsList","Array","from","temp","swapMemoContents","memoIdx","todoIdx","memolist","deleteMemoContents","memolength","length","i","slice","deleteTodoContents","shouldComponentUpdate","nextProps","nextState","stage","console","log","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","_contents","updateContentsTodoList","target","value","forceUpdate","_deleteContents","lengt","mode","nowMemolist"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDivEnter from \"./RenderTodoMemoDivEnter\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        // TodoList controll selector\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.currentListIndex = 1;\n        // filterTodo cursor\n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    \n    \n\n\n\n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        // console.log(\"fuck ready todo swap\");\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.stage === nextProps.stage) {\n            console.log(\"render\");\n          return true;\n        }\n        console.log(\"no render\");\n        return false;\n      }\n\n\n\n    componentDidMount() {\n        // console.log(\"ready fuck\");\n        window.addEventListener('keydown',(e)=>{\n            \n            // console.log(\"RenderTodoList action Mode \" , this.actionMode , \"writeContent Mode \", this.writeContentMode);\n            /*\n                위아래로 swap하는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n                console.log(\"controllerReadyTodoList : componentDidMount start------------------------\")\n                console.log(this.props._stage);\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[1][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',1,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[1].length-1){\n                            this.swapTodoContents('down',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',1,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        if(_deleteContents[1][this.currentTodoSelector].memolist.lengt!==0){\n                            _deleteContents = this.deleteMemoContents(1,this.currentTodoSelector,this.currentMemoSelector,_deleteContents);\n                            if(this.currentMemoSelector=== _deleteContents[1][this.currentTodoSelector].memolist.lengt-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(_deleteContents.length ===1){\n                            _deleteContents[1] = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(_deleteContents.length !==0){\n                            _deleteContents = this.deleteTodoContents(1,this.currentTodoSelector,_deleteContents);\n                            if(this.currentTodoSelector === _deleteContents[1].length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    위아래로 커서 변경하는 상황\n                    ************************* need refactorying **********************\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[1][this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents[1].length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[1].length-1)? this.props._contents[1].length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n            }\n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className='EnterTodo'>\n                <RenderTodoMemoDivEnter\n                _contents={this.props._contents[1]}\n                _mode = {this.actionMode}\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _writeContentMode = {this.writeContentMode}\n                ></RenderTodoMemoDivEnter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}