{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'selectorMode';\n    this.currentTodoSelector = 0;\n    this.currentMemoSelector = -1; // filterTodo cursor\n\n    this.filterTodoCursorListCnt = 1;\n    this.state = {\n      pressArrowDirection: ''\n    };\n  }\n  /*\n  TodoList 위아리 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapTodoContents(UpDown, targetList, currentSelector, updateFunction, propsContents) {\n    console.log(updateFunction);\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][currentSelector];\n    updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector + upDownInt];\n    updateContentsList[targetList][currentSelector + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  Memo 위아래 바꾸기\n  UpDonw : 위인지 아래인지\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  swapMemoContents(UpDown, targetList, currentTodoSelector, currentMemoSelector, updateFunction, propsContents) {\n    let memoIdx = currentMemoSelector;\n    let todoIdx = currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(propsContents);\n    var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt] = temp;\n    updateFunction(updateContentsList);\n  }\n  /*\n  MemoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  currentMemoSelector : 현재 선택된 메모 번호\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteMemoContents(targetList, currentTodoSelector, currentMemoSelector, propsContents) {\n    let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n\n    for (var i = currentMemoSelector; i < propsContents[targetList][currentTodoSelector].length - 1; i++) {\n      propsContents[targetList][currentTodoSelector].memolist[i] = propsContents[targetList][currentTodoSelector].memolist[i + 1];\n    }\n\n    propsContents[targetList][currentTodoSelector].memolist = propsContents[targetList][currentTodoSelector].memolist.slice(0, memolength - 1);\n    return propsContents;\n  } // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n\n  /*\n  TodoList 삭제\n  targetList : 지우고자 하는 list => 0,1,2\n  currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n  propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n  */\n\n\n  deleteTodoContents(targetList, currentTodoSelector, propsContents) {\n    for (var i = currentTodoSelector; i < propsContents[targetList].length - 1; i++) {\n      propsContents[targetList][i] = propsContents[targetList][i + 1];\n    }\n\n    propsContents = propsContents[targetList].slice(0, propsContents.length - 1);\n    return propsContents;\n  }\n  /*\n  nowListNum : 현재 cursor number\n  LeftRight : 이동해야하는 방향\n  */\n\n\n  changeFilterListCnt(nowListNum, LeftRight) {\n    if (LeftRight === 'ArrowRight' && nowListNum <= 1) {\n      nowListNum = nowListNum + 1;\n    } else if (LeftRight === 'ArrowLeft' && nowListNum >= 1) {\n      nowListNum = nowListNum - 1;\n    }\n\n    return nowListNum;\n  }\n\n  changeFilterListElement(nowListNum, LeftRight, nowListIdx, propsContents, updateFunction) {\n    let changeFilterList = Array.from(propsContents);\n    let moveIdx = -1; // 상태 변경\n\n    if (LeftRight === 'ArrowRight' && nowListNum === 2) return;else moveIdx = nowListNum + 1;\n    if (LeftRight === 'ArrowLeft' && nowListNum === 0) return;else moveIdx = nowListNum - 1;\n    let changeMode = moveIdx === 0 ? 'willNotDo' : moveIdx === 1 ? 'ready' : 'willDo';\n    changeFilterList[nowListNum][nowListIdx].todoState = changeMode; // 이동시킴\n\n    changeFilterList[moveIdx].push(changeFilterList[nowListNum][nowListIdx]); // 원래 list에서 제거\n\n    for (let i = nowListIdx; i < changeFilterList[nowListNum].length - 1; i++) {\n      changeFilterList[nowListNum][i] = changeFilterList[nowListNum][i + 1];\n    }\n\n    changeFilterList[nowListNum] = changeFilterList[nowListNum].slice(0, changeFilterList[nowListNum].length - 1);\n    console.log(\"In function\", changeFilterList);\n    return updateFunction(changeFilterList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      if (this.props._stage === 'FilterTodo') {\n        // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        // filterTodo 상태에서 이동제어\n        // 이동에 관한 것\n        // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        if (!e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40) {\n          console.log(\"fuck\");\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            console.log(\"change idx\", this.currentTodoSelector); //controll todo mode\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.props._contents[this.filterTodoCursorListCnt].length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents[this.filterTodoCursorListCnt].length - 1 ? this.props._contents[this.filterTodoCursorListCnt].length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowLeft') {\n              this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowLeft\");\n            } else if (_pressArrowDirection === 'ArrowRight') {\n              this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowRight\");\n            }\n          }\n\n          this.forceUpdate();\n        } // 위치변경 로직\n\n\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n          console.log(this.props._contents);\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.filterTodoCursorListCnt][this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down', this.filterTodoCursorListCnt, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up', this.filterTodoCursorListCnt, this.currentTodoSelector, this.currentMemoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents[this.filterTodoCursorListCnt].length - 1) {\n              this.swapTodoContents('down', this.filterTodoCursorListCnt, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up', this.filterTodoCursorListCnt, this.currentTodoSelector, this.props.updateContentsTodoList, this.props._contents);\n            }\n          } // change todoList mode\n          // todoList mode를 바꾼다. Not will Do and Will Do\n\n\n          if (_pressArrowDirection === 'ArrowLeft') {\n            this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowLeft', this.currentTodoSelector, this.props._contents, this.props.updateContentsTodoList);\n          } else if (_pressArrowDirection === 'ArrowRight') {\n            this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowRight', this.currentTodoSelector, this.props._contents, this.props.updateContentsTodoList);\n          }\n\n          this.forceUpdate();\n        } // 메모의 상태를 변경하기 위해서 사용\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') {\n            this.writeContentMode = 'memoList';\n            this.currentMemoSelector = 0;\n          } else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n\n          e.target.value = \"\";\n          this.forceUpdate();\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDiveFilter, {\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _filterTodoCursorListCnt: this.filterTodoCursorListCnt,\n        _filterTodoCursorList: this.props._contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","currentTodoSelector","currentMemoSelector","filterTodoCursorListCnt","state","pressArrowDirection","swapTodoContents","UpDown","targetList","currentSelector","updateFunction","propsContents","console","log","upDownInt","updateContentsList","Array","from","temp","swapMemoContents","memoIdx","todoIdx","memolist","deleteMemoContents","memolength","length","i","slice","deleteTodoContents","changeFilterListCnt","nowListNum","LeftRight","changeFilterListElement","nowListIdx","changeFilterList","moveIdx","changeMode","todoState","push","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","writeContentMode","nowMemolist","_contents","forceUpdate","updateContentsTodoList","target","value"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'selectorMode';\n        this.currentTodoSelector = 0;\n        this.currentMemoSelector = -1;\n        // filterTodo cursor\n        this.filterTodoCursorListCnt =1;     \n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    /*\n    TodoList 위아리 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapTodoContents(UpDown,targetList,currentSelector,updateFunction,propsContents){\n        console.log(updateFunction);\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][currentSelector];\n        updateContentsList[targetList][currentSelector] = updateContentsList[targetList][currentSelector+upDownInt];\n        updateContentsList[targetList][currentSelector+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    Memo 위아래 바꾸기\n    UpDonw : 위인지 아래인지\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    updateFunction : 함수에서 callback 하는 구조 => property에서 받아온 값\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    swapMemoContents(UpDown,targetList,currentTodoSelector,currentMemoSelector,updateFunction,propsContents){\n        let memoIdx = currentMemoSelector;\n        let todoIdx = currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(propsContents);\n        var temp = updateContentsList[targetList][todoIdx].memolist[memoIdx];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx] = updateContentsList[targetList][todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[targetList][todoIdx].memolist[memoIdx+upDownInt] = temp;\n        updateFunction(updateContentsList);\n    }\n\n    /*\n    MemoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    currentMemoSelector : 현재 선택된 메모 번호\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteMemoContents(targetList,currentTodoSelector,currentMemoSelector,propsContents){\n        let memolength = propsContents[targetList][currentTodoSelector].memolist.length;\n        for(var i = currentMemoSelector; i<propsContents[targetList][currentTodoSelector].length-1; i++){\n            propsContents[targetList][currentTodoSelector].memolist[i] = \n            propsContents[targetList][currentTodoSelector].memolist[i+1]\n        }\n        propsContents[targetList][currentTodoSelector].memolist=\n        propsContents[targetList][currentTodoSelector].memolist.slice(0,memolength-1);\n        return propsContents;\n    }\n\n    // 함수에는 해당되는 기능만을 집중해서 구현하자 -> 함수는 필요한 것만!\n    /*\n    TodoList 삭제\n    targetList : 지우고자 하는 list => 0,1,2\n    currentTodoSelector : 현재 선택된 번호 => 몇번째가 선택 되었는지\n    propsContents : property로 부터 받아온 [[],[],[]] 리스트 전체\n    */\n    deleteTodoContents(targetList,currentTodoSelector,propsContents){\n        for(var i=currentTodoSelector; i<propsContents[targetList].length-1; i++){\n            propsContents[targetList][i] = propsContents[targetList][i+1];\n        }\n        propsContents = propsContents[targetList].slice(0,propsContents.length-1);\n        return propsContents;\n    }\n\n\n    /*\n    nowListNum : 현재 cursor number\n    LeftRight : 이동해야하는 방향\n    */\n    changeFilterListCnt(nowListNum, LeftRight){\n        if(LeftRight === 'ArrowRight' && nowListNum <=1){\n            nowListNum = nowListNum+1;\n        }\n        else if(LeftRight === 'ArrowLeft' && nowListNum>=1){\n            nowListNum = nowListNum-1;\n        }\n        return nowListNum;\n    }\n\n    changeFilterListElement(nowListNum, LeftRight, nowListIdx , propsContents, updateFunction){\n        let changeFilterList = Array.from(propsContents);\n        let moveIdx =-1;\n        // 상태 변경\n        if(LeftRight === 'ArrowRight' && nowListNum === 2 ) return;\n        else moveIdx = nowListNum+1;\n        if(LeftRight === 'ArrowLeft' && nowListNum === 0 ) return;\n        else moveIdx = nowListNum-1;\n        let changeMode =(moveIdx === 0 )? 'willNotDo' : ((moveIdx === 1) ? 'ready' : 'willDo');\n\n        changeFilterList[nowListNum][nowListIdx].todoState = changeMode;\n        // 이동시킴\n        changeFilterList[moveIdx].push(changeFilterList[nowListNum][nowListIdx]);\n        // 원래 list에서 제거\n        for(let i=nowListIdx; i<changeFilterList[nowListNum].length-1; i++){\n            changeFilterList[nowListNum][i] = changeFilterList[nowListNum][i+1];\n        }\n        changeFilterList[nowListNum] = changeFilterList[nowListNum].slice(0, changeFilterList[nowListNum].length-1);\n        console.log(\"In function\",changeFilterList);\n        return updateFunction(changeFilterList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            if(this.props._stage === 'FilterTodo'){\n\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                // filterTodo 상태에서 이동제어\n                // 이동에 관한 것\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                if(!e.shiftKey && 37<=e.keyCode && e.keyCode<=40){\n                    console.log(\"fuck\");\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        console.log(\"change idx\", this.currentTodoSelector);\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.props._contents[this.filterTodoCursorListCnt].length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents[this.filterTodoCursorListCnt].length-1)? this.props._contents[this.filterTodoCursorListCnt].length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }else if(_pressArrowDirection === 'ArrowLeft'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowLeft\");\n                        }else if(_pressArrowDirection === 'ArrowRight'){\n                            this.filterTodoCursorListCnt = this.changeFilterListCnt(this.filterTodoCursorListCnt, \"ArrowRight\");\n                        }\n                    }\n                    this.forceUpdate();\n                }\n\n\n                // 위치변경 로직\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n                    console.log(this.props._contents);\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.filterTodoCursorListCnt][this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.currentMemoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents[this.filterTodoCursorListCnt].length-1){\n                            this.swapTodoContents('down',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up',this.filterTodoCursorListCnt,this.currentTodoSelector,this.props.updateContentsTodoList,this.props._contents);\n                        }\n                    }\n                    // change todoList mode\n                    // todoList mode를 바꾼다. Not will Do and Will Do\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowLeft', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        this.changeFilterListElement(this.filterTodoCursorListCnt, 'ArrowRight', this.currentTodoSelector , this.props._contents, this.props.updateContentsTodoList);\n                    }\n                    \n                    \n                    this.forceUpdate();\n                }\n\n\n                // 메모의 상태를 변경하기 위해서 사용\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') {\n                        this.writeContentMode = 'memoList';\n                        this.currentMemoSelector = 0;\n                    }\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n                \n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"FilterTodo\">\n            <RenderTodoMemoDiveFilter\n                _currentTodoSelector = {this.currentTodoSelector}\n                _currentMemoSelector = {this.currentMemoSelector}\n                _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n                _filterTodoCursorList = {this.props._contents}\n            ></RenderTodoMemoDiveFilter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}