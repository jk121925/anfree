{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.actionMode = 'writeMode';\n    this.writeContentMode = 'todoList';\n    this.currentTodoSelector = -1; // this.\n\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentTodoSelector];\n    updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector + upDownInt];\n    updateContentsList[this.currentTodoSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n          console.log(this.currentTodoSelector);\n          this.swapContents('down');\n        } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n          this.swapContents('up');\n        }\n      }\n      /**\n       * 메모기능 구현\n       * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n       * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n       * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n       * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n       * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n       */\n\n\n      if (this.actionMode === 'selectorMode' && e.key === '/') {\n        if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else this.writeContentMode = 'todoList';\n        this.forceUpdate();\n      }\n      /*\n          delete 기능 구현\n      */\n\n\n      if (e.shiftKey && e.key === 'Delete') {\n        var _deleteContents = Array.from(this.props._contents);\n\n        if (this.props._contents.length === 1) {\n          _deleteContents = [];\n          this.currentTodoSelector = this.currentTodoSelector - 1;\n          this.mode = 'writeMode';\n        } else if (this.props._contents.length !== 0) {\n          for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n            _deleteContents[i] = _deleteContents[i + 1];\n          }\n\n          _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n          if (this.currentTodoSelector === this.props._contents.length - 1) {\n            this.currentTodoSelector = this.currentTodoSelector - 1;\n          }\n        }\n\n        this.props.updateContentsTodoList(_deleteContents);\n      }\n      /*\n          writeMode vs selectorMode \n          selectorMode면 움직이고 있는 중입니다.\n      */\n\n\n      if (37 <= e.keyCode && e.keyCode <= 40) {\n        var _pressArrowDirection = e.key;\n\n        if (_pressArrowDirection === 'ArrowDown') {\n          if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n            this.currentTodoSelector = 0;\n            this.actionMode = 'selectorMode';\n          } else if (this.actionMode === 'selectorMode') {\n            this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n          }\n        } else if (_pressArrowDirection === 'ArrowUp') {\n          if (this.actionMode === 'selectorMode') {\n            if (this.currentTodoSelector === 0) {\n              this.actionMode = 'writeMode';\n            } else {\n              this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n            }\n          }\n        }\n\n        this.forceUpdate();\n      } //end arrow if test\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(TodoMemoDivRender, {\n      _contents: this.props._contents,\n      _mode: this.actionMode,\n      _currentTodoSelector: this.currentTodoSelector,\n      _writeContentMode: this.writeContentMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js"],"names":["render","React","Component","TodoMemoDivRender","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","state","pressShiftCnt","pressArrowDirection","swapContents","UpDown","upDownInt","updateContentsList","Array","from","_contents","temp","updateContentsTodoList","componentDidMount","window","addEventListener","e","shiftKey","keyCode","_pressArrowDirection","key","length","console","log","forceUpdate","_deleteContents","mode","i","slice"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component} from \"react\";\nimport TodoMemoDivRender from \"./TodoMemoDiv\";\nimport \"./TodoElement.css\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        this.actionMode = 'writeMode';\n        this.writeContentMode = 'todoList';\n        this.currentTodoSelector = -1;\n        // this.\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(e);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                    console.log(this.currentTodoSelector)\n                    this.swapContents('down');\n                }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                    this.swapContents('up');\n                }\n            }\n\n            /**\n             * 메모기능 구현\n             * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n             * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n             * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n             * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n             * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n             */\n            if(this.actionMode === 'selectorMode' && e.key === '/'){\n                if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                else this.writeContentMode = 'todoList';\n                this.forceUpdate();\n            }\n\n            /*\n                delete 기능 구현\n            */\n            if(e.shiftKey && e.key === 'Delete'){\n                var _deleteContents = Array.from(this.props._contents)\n                if(this.props._contents.length ===1){\n                    _deleteContents = []\n                    this.currentTodoSelector = this.currentTodoSelector-1;\n                    this.mode = 'writeMode'\n                }\n                else if(this.props._contents.length !==0){\n                    for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                        _deleteContents[i] = _deleteContents[i+1];\n                    }\n                    _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                    if(this.currentTodoSelector === this.props._contents.length-1){\n                        this.currentTodoSelector = this.currentTodoSelector-1;\n                    }\n                }\n                this.props.updateContentsTodoList(_deleteContents);\n            }\n            /*\n                writeMode vs selectorMode \n                selectorMode면 움직이고 있는 중입니다.\n            */\n            if(37<=e.keyCode && e.keyCode<=40){\n                var _pressArrowDirection = e.key;\n                if(_pressArrowDirection === 'ArrowDown'){\n                    if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                        this.currentTodoSelector = 0;\n                        this.actionMode = 'selectorMode'\n                    }else if(this.actionMode === 'selectorMode'){\n                        this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                    }\n                }else if(_pressArrowDirection === 'ArrowUp'){\n                    if(this.actionMode === 'selectorMode'){\n                        if(this.currentTodoSelector === 0){\n                            this.actionMode ='writeMode'\n                        }else{\n                            this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                        }\n                    }\n                }\n                this.forceUpdate();\n            }//end arrow if test\n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <TodoMemoDivRender \n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentTodoSelector = {this.currentTodoSelector}\n            _writeContentMode = {this.writeContentMode}\n            ></TodoMemoDivRender>\n            \n\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}