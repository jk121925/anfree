{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiveFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MemoInput from \"./MemoInput\";\nimport \"./TodoElementFilter.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoMemoDivFilter(_ref) {\n  _s();\n\n  let {\n    _contents,\n    _mode,\n    _currentTodoSelector,\n    _writeContentMode,\n    _currentMemoSelector\n  } = _ref;\n  // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n  const [preContents, AfterContents] = useState(_contents);\n  let readyList = [];\n  let willNotDoList = [];\n  let willDoList = [];\n  console.log(_contents, _mode, _currentTodoSelector);\n\n  const setAfterContents = update => {\n    AfterContents(update);\n  }; // make memo <div> list\n  // 메모 리스트를 만드는 component\n\n\n  const makeMemoDivList = (memoListByContent, __currentMemoSelector) => {\n    return memoListByContent.map((memoElement, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: __currentMemoSelector === index ? \"memoElement-now\" : \"memoElement\",\n      children: memoElement\n    }, i + memoElement, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this));\n  };\n\n  var renderContainer = Array.from(_contents);\n  var i = 0;\n\n  if (_mode === 'selectorMode') {\n    while (i < renderContainer.length) {\n      if (renderContainer[i].todoState === \"ready\") {\n        if (_currentTodoSelector !== -1 && i === _currentTodoSelector) {\n          readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ready-now\",\n            children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, _currentMemoSelector)]\n          }, renderContainer[i].todolist, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this));\n        } else {\n          readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todoMainElement-now\",\n            children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n          }, renderContainer[i].todolist, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this));\n        }\n      } else if (renderContainer[i].todoState === \"NotWillDo\") {\n        console.log(\"renderContainer willNotDo: \", renderContainer[i]);\n        willNotDoList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WillNotDo\",\n          children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n        }, renderContainer[i].todolist, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this));\n      } else {\n        console.log(\"renderContainer WillDo: \", renderContainer[i]);\n        willDoList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WillDo\",\n          children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n        }, renderContainer[i].todolist, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this));\n      } // if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n      //     if(_writeContentMode ==='memoList'){\n      //         readyList.push(\n      //             <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n      //                 {renderContainer[i].todolist}\n      //                 <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n      //                     <MemoInput\n      //                         _memoContents = {renderContainer}\n      //                         _memoIdx = {_currentTodoSelector}\n      //                         _setterContents = {setAfterContents}\n      //                     ></MemoInput> \n      //                 </div>\n      //                 {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n      //             </div>\n      //         );\n      //     }else{\n      //         readyList.push(\n      //             <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n      //                 {renderContainer[i].todolist}\n      //                 {makeMemoDivList(renderContainer[i].memolist,-1)}\n      //             </div>\n      //         );\n      //     }\n      // }else{\n      //     readyList.push(\n      //         <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n      //             {renderContainer[i].todolist}\n      //             {makeMemoDivList(renderContainer[i].memolist,-1)}\n      //         </div>\n      //     );\n      // }\n\n\n      i = i + 1;\n    } //end while\n\n  } else {\n    while (i < renderContainer.length) {\n      readyList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoMainElement\",\n        children: [renderContainer[i].todolist, makeMemoDivList(renderContainer[i].memolist, -1)]\n      }, renderContainer[i].todolist, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this));\n      i = i + 1;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [willNotDoList, readyList, willDoList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoMemoDivFilter, \"BmVK3FTFSWSFaJR3qCfacxVLgHI=\");\n\n_c = TodoMemoDivFilter;\n;\nexport default TodoMemoDivFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoMemoDivFilter\");","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/TodoMemoDiveFilter.js"],"names":["React","useState","MemoInput","TodoMemoDivFilter","_contents","_mode","_currentTodoSelector","_writeContentMode","_currentMemoSelector","preContents","AfterContents","readyList","willNotDoList","willDoList","console","log","setAfterContents","update","makeMemoDivList","memoListByContent","__currentMemoSelector","map","memoElement","index","i","renderContainer","Array","from","length","todoState","push","todolist","memolist"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA6B,OAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,yBAAP;;;AAEA,SAASC,iBAAT,OAAyG;AAAA;;AAAA,MAA9E;AAACC,IAAAA,SAAD;AAAWC,IAAAA,KAAX;AAAiBC,IAAAA,oBAAjB;AAAsCC,IAAAA,iBAAtC;AAAwDC,IAAAA;AAAxD,GAA8E;AACrG;AACA,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+BT,QAAQ,CAACG,SAAD,CAA7C;AACA,MAAIO,SAAS,GAAE,EAAf;AACA,MAAIC,aAAa,GAAE,EAAnB;AACA,MAAIC,UAAU,GAAE,EAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ,EAAsBC,KAAtB,EAA4BC,oBAA5B;;AACA,QAAMU,gBAAgB,GAAGC,MAAD,IAAU;AAC9BP,IAAAA,aAAa,CAACO,MAAD,CAAb;AACH,GAFD,CAPqG,CAWrG;AACA;;;AACA,QAAMC,eAAe,GAAE,CAACC,iBAAD,EAAmBC,qBAAnB,KAA2C;AAC9D,WACID,iBAAiB,CAACE,GAAlB,CAAsB,CAACC,WAAD,EAAaC,KAAb,kBAClB;AAAK,MAAA,SAAS,EAAGH,qBAAqB,KAAGG,KAAzB,GAAmC,iBAAnC,GAAqD,aAArE;AAAA,gBAAyGD;AAAzG,OAAyFE,CAAC,GAACF,WAA3F;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAKH,GAND;;AAUA,MAAIG,eAAe,GAAGC,KAAK,CAACC,IAAN,CAAWvB,SAAX,CAAtB;AACA,MAAIoB,CAAC,GAAC,CAAN;;AAEA,MAAGnB,KAAK,KAAK,cAAb,EAA4B;AACxB,WAAMmB,CAAC,GAACC,eAAe,CAACG,MAAxB,EAA+B;AAC3B,UAAGH,eAAe,CAACD,CAAD,CAAf,CAAmBK,SAAnB,KAAgC,OAAnC,EAA2C;AACvC,YAAGvB,oBAAoB,KAAG,CAAC,CAAxB,IAA6BkB,CAAC,KAAGlB,oBAApC,EAAyD;AACjDK,UAAAA,SAAS,CAACmB,IAAV,eACI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,uBACKL,eAAe,CAACD,CAAD,CAAf,CAAmBO,QADxB,EAEKb,eAAe,CAACO,eAAe,CAACD,CAAD,CAAf,CAAmBQ,QAApB,EAA6BxB,oBAA7B,CAFpB;AAAA,aAAgCiB,eAAe,CAACD,CAAD,CAAf,CAAmBO,QAAnD;AAAA;AAAA;AAAA;AAAA,kBADJ;AAMH,SAPL,MAQQ;AACApB,UAAAA,SAAS,CAACmB,IAAV,eACI;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA,uBACKL,eAAe,CAACD,CAAD,CAAf,CAAmBO,QADxB,EAEKb,eAAe,CAACO,eAAe,CAACD,CAAD,CAAf,CAAmBQ,QAApB,EAA6B,CAAC,CAA9B,CAFpB;AAAA,aAA0CP,eAAe,CAACD,CAAD,CAAf,CAAmBO,QAA7D;AAAA;AAAA;AAAA;AAAA,kBADJ;AAMH;AACR,OAjBD,MAiBM,IAAGN,eAAe,CAACD,CAAD,CAAf,CAAmBK,SAAnB,KAAgC,WAAnC,EAA+C;AACjDf,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CU,eAAe,CAACD,CAAD,CAA1D;AACAZ,QAAAA,aAAa,CAACkB,IAAd,eACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,qBACKL,eAAe,CAACD,CAAD,CAAf,CAAmBO,QADxB,EAEKb,eAAe,CAACO,eAAe,CAACD,CAAD,CAAf,CAAmBQ,QAApB,EAA6B,CAAC,CAA9B,CAFpB;AAAA,WAAgCP,eAAe,CAACD,CAAD,CAAf,CAAmBO,QAAnD;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH,OARK,MAQD;AACDjB,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCU,eAAe,CAACD,CAAD,CAAvD;AACAX,QAAAA,UAAU,CAACiB,IAAX,eACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,qBACKL,eAAe,CAACD,CAAD,CAAf,CAAmBO,QADxB,EAEKb,eAAe,CAACO,eAAe,CAACD,CAAD,CAAf,CAAmBQ,QAApB,EAA6B,CAAC,CAA9B,CAFpB;AAAA,WAA6BP,eAAe,CAACD,CAAD,CAAf,CAAmBO,QAAhD;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH,OAlC0B,CAmC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,MAAAA,CAAC,GAACA,CAAC,GAAC,CAAJ;AACH,KApEuB,CAoEvB;;AACJ,GArED,MAqEK;AACD,WAAMA,CAAC,GAACC,eAAe,CAACG,MAAxB,EAA+B;AAC3BjB,MAAAA,SAAS,CAACmB,IAAV,eACA;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,mBACKL,eAAe,CAACD,CAAD,CAAf,CAAmBO,QADxB,EAEKb,eAAe,CAACO,eAAe,CAACD,CAAD,CAAf,CAAmBQ,QAApB,EAA6B,CAAC,CAA9B,CAFpB;AAAA,SAAsCP,eAAe,CAACD,CAAD,CAAf,CAAmBO,QAAzD;AAAA;AAAA;AAAA;AAAA,cADA;AAOAP,MAAAA,CAAC,GAACA,CAAC,GAAC,CAAJ;AACH;AACJ;;AACD,sBACI;AAAA,eACKZ,aADL,EAEKD,SAFL,EAGKE,UAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAlHQV,iB;;KAAAA,iB;AAkHR;AAED,eAAeA,iBAAf","sourcesContent":["import React ,{useState}from \"react\";\nimport MemoInput from \"./MemoInput\";\nimport \"./TodoElementFilter.css\"\n\nfunction TodoMemoDivFilter({_contents,_mode,_currentTodoSelector,_writeContentMode,_currentMemoSelector}){\n    // console.log(\"TodoMemoDiv and _currentMemoSelector\" ,_currentTodoSelector, _currentMemoSelector);\n    const [preContents, AfterContents] = useState(_contents);\n    let readyList =[]\n    let willNotDoList =[]\n    let willDoList =[]\n    console.log(_contents,_mode,_currentTodoSelector)\n    const setAfterContents =(update)=>{\n        AfterContents(update);\n    }\n\n    // make memo <div> list\n    // 메모 리스트를 만드는 component\n    const makeMemoDivList =(memoListByContent,__currentMemoSelector)=>{\n        return(\n            memoListByContent.map((memoElement,index)=>(\n                <div className={(__currentMemoSelector===index ) ? \"memoElement-now\":\"memoElement\"} key={i+memoElement}>{memoElement}</div>\n            ))\n        )\n    }\n    \n\n\n    var renderContainer = Array.from(_contents);\n    var i=0;\n    \n    if(_mode === 'selectorMode'){\n        while(i<renderContainer.length){\n            if(renderContainer[i].todoState ===\"ready\"){\n                if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n                        readyList.push(\n                            <div className=\"ready-now\" key={renderContainer[i].todolist}>\n                                {renderContainer[i].todolist}\n                                {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n                            </div>\n                        );\n                    }\n                    else{\n                        readyList.push(\n                            <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n                                {renderContainer[i].todolist}\n                                {makeMemoDivList(renderContainer[i].memolist,-1)}\n                            </div>\n                        );\n                    }\n            }else if(renderContainer[i].todoState ===\"NotWillDo\"){\n                console.log(\"renderContainer willNotDo: \", renderContainer[i])\n                willNotDoList.push(\n                    <div className=\"WillNotDo\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }else{\n                console.log(\"renderContainer WillDo: \", renderContainer[i])\n                willDoList.push(\n                    <div className=\"WillDo\" key={renderContainer[i].todolist}>\n                        {renderContainer[i].todolist}\n                        {makeMemoDivList(renderContainer[i].memolist,-1)}\n                    </div>\n                );\n            }\n            // if(_currentTodoSelector!==-1 && i===_currentTodoSelector){\n            //     if(_writeContentMode ==='memoList'){\n            //         readyList.push(\n            //             <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n            //                 {renderContainer[i].todolist}\n            //                 <div className=\"MemoInput\" key={renderContainer[i].todolist +\"mempInputs\"}>\n            //                     <MemoInput\n            //                         _memoContents = {renderContainer}\n            //                         _memoIdx = {_currentTodoSelector}\n            //                         _setterContents = {setAfterContents}\n            //                     ></MemoInput> \n            //                 </div>\n            //                 {makeMemoDivList(renderContainer[i].memolist,_currentMemoSelector)}\n            //             </div>\n            //         );\n            //     }else{\n            //         readyList.push(\n            //             <div className=\"todoMainElement-now\" key={renderContainer[i].todolist}>\n            //                 {renderContainer[i].todolist}\n            //                 {makeMemoDivList(renderContainer[i].memolist,-1)}\n            //             </div>\n            //         );\n            //     }\n            // }else{\n            //     readyList.push(\n            //         <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n            //             {renderContainer[i].todolist}\n            //             {makeMemoDivList(renderContainer[i].memolist,-1)}\n            //         </div>\n            //     );\n            // }\n            i=i+1;\n        }//end while\n    }else{\n        while(i<renderContainer.length){\n            readyList.push(\n            <div className=\"todoMainElement\" key={renderContainer[i].todolist}>\n                {renderContainer[i].todolist}\n                {makeMemoDivList(renderContainer[i].memolist,-1)}\n            </div>\n            );\n            \n            i=i+1\n        }\n    }\n    return(\n        <div>\n            {willNotDoList}\n            {readyList}\n            {willDoList}\n        </div>\n    );\n};\n\nexport default TodoMemoDivFilter; "]},"metadata":{},"sourceType":"module"}