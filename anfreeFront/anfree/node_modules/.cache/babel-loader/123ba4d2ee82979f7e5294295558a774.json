{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport TodoMemoDivEnter from \"./TodoMemoDivEnter\";\nimport TodoMemoDivFilter from \"./TodoMemoDiveFilter\";\nimport \"./TodoElementRender.css\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'writeMode'; // writeContentMode : todoList, memoList\n\n    this.writeContentMode = 'todoList';\n    this.currentTodoSelector = -1;\n    this.currentMemoSelector = -1;\n    this.state = {\n      pressShiftCnt: 0,\n      pressArrowDirection: ''\n    };\n  }\n\n  swapTodoContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentTodoSelector];\n    updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector + upDownInt];\n    updateContentsList[this.currentTodoSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  swapMemoContents(UpDown) {\n    let memoIdx = this.currentMemoSelector;\n    let todoIdx = this.currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[todoIdx].memolist[memoIdx];\n    updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[todoIdx].memolist[memoIdx + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      // console.log(1);\n\n      /*\n          위아래로 움직이는 기능 구현\n      */\n      if (this.props._stage === 'EnterTodo') {\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up');\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n              this.swapTodoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up');\n            }\n          }\n        }\n        /**\n         * 메모기능 구현\n         * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n         * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n         * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n         * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n         * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n         */\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n          e.target.value = \"\";\n          this.forceUpdate();\n        }\n        /*\n            delete 기능 구현\n        */\n\n\n        if (e.shiftKey && e.key === 'Delete') {\n          var _deleteContents = Array.from(this.props._contents);\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n\n            if (memolength !== 0) {\n              for (var i = this.currentMemoSelector; i < memo - 1; i++) {\n                _deleteContents[this.currentTodoSelector].memolist[i] = _deleteContents[this.currentTodoSelector].memolist[i + 1];\n              }\n\n              _deleteContents[this.currentTodoSelector].memolist = _deleteContents[this.currentTodoSelector].memolist.slice(0, memolength - 1);\n\n              if (this.currentMemoSelector === memolength - 1) {\n                this.currentMemoSelector = this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            if (this.props._contents.length === 1) {\n              _deleteContents = [];\n              this.currentTodoSelector = this.currentTodoSelector - 1;\n              this.mode = 'writeMode';\n            } else if (this.props._contents.length !== 0) {\n              for (var i = this.currentTodoSelector; i < _deleteContents.length - 1; i++) {\n                _deleteContents[i] = _deleteContents[i + 1];\n              }\n\n              _deleteContents = _deleteContents.slice(0, _deleteContents.length - 1);\n\n              if (this.currentTodoSelector === this.props._contents.length - 1) {\n                this.currentTodoSelector = this.currentTodoSelector - 1;\n              }\n            }\n          }\n\n          this.props.updateContentsTodoList(_deleteContents);\n        }\n        /*\n            writeMode vs selectorMode \n            selectorMode면 움직이고 있는 중입니다.\n        */\n\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                if (this.currentTodoSelector === 0) {\n                  this.actionMode = 'writeMode';\n                } else {\n                  this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n                }\n              }\n            }\n          }\n\n          this.forceUpdate();\n        } //end arrow if test\n\n        /**\n         * Second stage -> filterTodo 일 때  동작하는 로직\n         * RenderTodoList가 복잡해 지지만 한곳에서 관리하는게 더 나을 수 있다는 생각을 해봅니다.\n         * 후에 따로 빼서 관리하는 방법이 필요 할 수 있습니다.\n         */\n\n      } else if (this.props._stage === 'FilterTodo') {\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up');\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n              this.swapTodoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up');\n            }\n          }\n\n          if (_pressArrowDirection === 'ArrowLeft') {\n            let _contentsUpdate = Array.from(this.props._contents);\n\n            _contentsUpdate[this.currentTodoSelector].todoState = \"NotWillDo\";\n            this.props.updateContentsTodoList(_contentsUpdate);\n          } else if (_pressArrowDirection === 'ArrowRight') {\n            let _contentsUpdate = Array.from(this.props._contents);\n\n            _contentsUpdate[this.currentTodoSelector].todoState = \"WillDo\";\n            this.props.updateContentsTodoList(_contentsUpdate);\n          }\n\n          console.log(this.props._contents);\n        }\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key; //controll todo mode\n\n          if (_pressArrowDirection === 'ArrowDown') {\n            if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n              this.currentTodoSelector = 0;\n              this.actionMode = 'selectorMode';\n            } else if (this.actionMode === 'selectorMode') {\n              this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n            }\n          } else if (_pressArrowDirection === 'ArrowUp') {\n            if (this.actionMode === 'selectorMode') {\n              this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n            }\n          }\n\n          this.forceUpdate();\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props._stage === 'EnterTodo' ? 'EnterTodo' : this.props._stage === 'FilterTodo' ? \"FilterTodo\" : \"EraseTodo\",\n      children: this.props._stage === 'EnterTodo' ? /*#__PURE__*/_jsxDEV(TodoMemoDivEnter, {\n        _contents: this.props._contents,\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }, this) : this.props._stage === 'FilterTodo' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoMemoDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"NotWillDo\",\n          children: /*#__PURE__*/_jsxDEV(TodoMemoDivFilter, {\n            _contents: this.props._contents,\n            _mode: this.actionMode,\n            _currentTodoSelector: this.currentTodoSelector,\n            _currentMemoSelector: this.currentMemoSelector,\n            _writeContentMode: this.writeContentMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ready\",\n          children: /*#__PURE__*/_jsxDEV(TodoMemoDivFilter, {\n            _contents: this.props._contents,\n            _mode: this.actionMode,\n            _currentTodoSelector: this.currentTodoSelector,\n            _currentMemoSelector: this.currentMemoSelector,\n            _writeContentMode: this.writeContentMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WillDo\",\n          children: /*#__PURE__*/_jsxDEV(TodoMemoDivFilter, {\n            _contents: this.props._contents,\n            _mode: this.actionMode,\n            _currentTodoSelector: this.currentTodoSelector,\n            _currentMemoSelector: this.currentMemoSelector,\n            _writeContentMode: this.writeContentMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(TodoMemoDivEnter, {\n        _contents: this.props._contents,\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/RenderTodoList.js"],"names":["render","React","Component","memo","TodoMemoDivEnter","TodoMemoDivFilter","RenderTodoList","constructor","props","actionMode","writeContentMode","currentTodoSelector","currentMemoSelector","state","pressShiftCnt","pressArrowDirection","swapTodoContents","UpDown","upDownInt","updateContentsList","Array","from","_contents","temp","updateContentsTodoList","swapMemoContents","memoIdx","todoIdx","memolist","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","memolength","length","target","value","forceUpdate","_deleteContents","i","slice","mode","nowMemolist","_contentsUpdate","todoState","console","log"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport TodoMemoDivEnter from \"./TodoMemoDivEnter\";\nimport TodoMemoDivFilter from \"./TodoMemoDiveFilter\";\nimport \"./TodoElementRender.css\"\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'writeMode';\n        // writeContentMode : todoList, memoList\n        this.writeContentMode = 'todoList';\n        this.currentTodoSelector = -1;\n        this.currentMemoSelector = -1;\n        this.state={\n            pressShiftCnt :0,\n            pressArrowDirection : ''\n        }\n    }\n    \n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            // console.log(1);\n            /*\n                위아래로 움직이는 기능 구현\n            */\n            if(this.props._stage === 'EnterTodo'){\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                }\n    \n                /**\n                 * 메모기능 구현\n                 * selector Mode 일 때 '/'를 누르면 메모 모드로 들어가기\n                 * input창이 떠야하고 -> 입력하면 this.props._contents가 업데이트 되어야 함\n                 * _contents의 자료구조는 list 이어야 하는가? component이어야 하는가?\n                 * 아니면 javascript 구조로 class를 만들어야 하는가? 고민이네\n                 * ----> class로 만들어서 memo랑 같이 관리하자 ㅇㅇ 이게 답인듯\n                 */\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') this.writeContentMode = 'memoList';\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n    \n                /*\n                    delete 기능 구현\n                */\n                if(e.shiftKey && e.key === 'Delete'){\n                    var _deleteContents = Array.from(this.props._contents)\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = _deleteContents[this.currentTodoSelector].memolist.length;\n                        if( memolength!==0){\n                            for(var i = this.currentMemoSelector; i<memo-1; i++){\n                                _deleteContents[this.currentTodoSelector].memolist[i] = \n                                _deleteContents[this.currentTodoSelector].memolist[i+1]\n                            }\n                            _deleteContents[this.currentTodoSelector].memolist=\n                            _deleteContents[this.currentTodoSelector].memolist.slice(0,memolength-1);\n                            if(this.currentMemoSelector=== memolength-1){\n                                this.currentMemoSelector = this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        if(this.props._contents.length ===1){\n                            _deleteContents = []\n                            this.currentTodoSelector = this.currentTodoSelector-1;\n                            this.mode = 'writeMode'\n                        }\n                        else if(this.props._contents.length !==0){\n                            for(var i=this.currentTodoSelector; i<_deleteContents.length-1; i++){\n                                _deleteContents[i] = _deleteContents[i+1];\n                            }\n                            _deleteContents = _deleteContents.slice(0,_deleteContents.length-1);\n                            if(this.currentTodoSelector === this.props._contents.length-1){\n                                this.currentTodoSelector = this.currentTodoSelector-1;\n                            }\n                        }\n                    }\n                    this.props.updateContentsTodoList(_deleteContents);\n                }\n                /*\n                    writeMode vs selectorMode \n                    selectorMode면 움직이고 있는 중입니다.\n                */\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                if(this.currentTodoSelector === 0){\n                                    this.actionMode ='writeMode'\n                                }else{\n                                    this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                                }\n                            }\n                        }\n                    }\n                    this.forceUpdate();\n                }//end arrow if test\n                /**\n                 * Second stage -> filterTodo 일 때  동작하는 로직\n                 * RenderTodoList가 복잡해 지지만 한곳에서 관리하는게 더 나을 수 있다는 생각을 해봅니다.\n                 * 후에 따로 빼서 관리하는 방법이 필요 할 수 있습니다.\n                 */\n            }else if(this.props._stage === 'FilterTodo'){\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        let _contentsUpdate = Array.from(this.props._contents);\n                        _contentsUpdate[this.currentTodoSelector].todoState = \"NotWillDo\";\n                        this.props.updateContentsTodoList(_contentsUpdate);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        let _contentsUpdate = Array.from(this.props._contents);\n                        _contentsUpdate[this.currentTodoSelector].todoState = \"WillDo\";\n                        this.props.updateContentsTodoList(_contentsUpdate);    \n                    }\n                    console.log(this.props._contents);\n                }\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }\n                    this.forceUpdate();\n                }\n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className={(this.props._stage==='EnterTodo') ? 'EnterTodo': ((this.props._stage === 'FilterTodo') ? \"FilterTodo\" : \"EraseTodo\") }>\n                {\n                    (this.props._stage === 'EnterTodo') ? (\n                        <TodoMemoDivEnter\n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></TodoMemoDivEnter>\n                    ) : (\n                        (this.props._stage==='FilterTodo') ? \n                    (\n                        <div className=\"todoMemoDiv\">\n                            <div className=\"NotWillDo\">\n                            <TodoMemoDivFilter\n                            _contents={this.props._contents}\n                            _mode = {this.actionMode}\n                            _currentTodoSelector = {this.currentTodoSelector}\n                            _currentMemoSelector = {this.currentMemoSelector}\n                            _writeContentMode = {this.writeContentMode}\n                            ></TodoMemoDivFilter>\n                            </div>\n                            <div className=\"ready\">\n                            <TodoMemoDivFilter\n                            _contents={this.props._contents}\n                            _mode = {this.actionMode}\n                            _currentTodoSelector = {this.currentTodoSelector}\n                            _currentMemoSelector = {this.currentMemoSelector}\n                            _writeContentMode = {this.writeContentMode}\n                            ></TodoMemoDivFilter>\n                            </div>\n                            <div className=\"WillDo\">\n                            <TodoMemoDivFilter\n                            _contents={this.props._contents}\n                            _mode = {this.actionMode}\n                            _currentTodoSelector = {this.currentTodoSelector}\n                            _currentMemoSelector = {this.currentMemoSelector}\n                            _writeContentMode = {this.writeContentMode}\n                            ></TodoMemoDivFilter>\n                            </div>\n                        </div>\n                    ):(\n                        <TodoMemoDivEnter  \n                        _contents={this.props._contents}\n                        _mode = {this.actionMode}\n                        _currentTodoSelector = {this.currentTodoSelector}\n                        _currentMemoSelector = {this.currentMemoSelector}\n                        _writeContentMode = {this.writeContentMode}\n                        ></TodoMemoDivEnter>\n                        )\n                    ) \n                }\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}