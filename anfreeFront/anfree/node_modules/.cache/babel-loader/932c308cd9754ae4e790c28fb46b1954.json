{"ast":null,"code":"var _jsxFileName = \"/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component, memo } from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\"; // mode, contents\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RenderTodoList extends Component {\n  constructor(props) {\n    super(props); //actionMode : writeMode, selectorMode,\n\n    this.actionMode = 'selectorMode';\n    this.currentTodoSelector = 0;\n    this.currentMemoSelector = -1;\n    this.readyList = this.props._contents;\n    this.willNotDoList = [];\n    this.willDoList = []; // filterTodo cursor\n\n    this.filterTodoCursorList = [this.willNotDoList, this.readyList, this.willDoList];\n    this.filterTodoCursorListCnt = 1;\n    this.state = {\n      pressArrowDirection: ''\n    };\n  } //다시\n\n\n  swapTodoContents(UpDown) {\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[this.currentTodoSelector];\n    updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector + upDownInt];\n    updateContentsList[this.currentTodoSelector + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  } //다시\n\n\n  swapMemoContents(UpDown) {\n    let memoIdx = this.currentMemoSelector;\n    let todoIdx = this.currentTodoSelector;\n    var upDownInt = UpDown === 'up' ? -1 : 1;\n    var updateContentsList = Array.from(this.props._contents);\n    var temp = updateContentsList[todoIdx].memolist[memoIdx];\n    updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n    updateContentsList[todoIdx].memolist[memoIdx + upDownInt] = temp;\n    this.props.updateContentsTodoList(updateContentsList);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => {\n      if (this.props._stage === 'FilterTodo') {\n        // 위치변경 로직\n        if (e.shiftKey && 37 <= e.keyCode && e.keyCode <= 40 && this.actionMode === 'selectorMode') {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n\n            if (_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector != memolength - 1) {\n              this.swapMemoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentMemoSelector != 0) {\n              this.swapMemoContents('up');\n            }\n          } else {\n            if (_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector != this.props._contents.length - 1) {\n              this.swapTodoContents('down');\n            } else if (_pressArrowDirection === 'ArrowUp' && this.currentTodoSelector != 0) {\n              this.swapTodoContents('up');\n            }\n          } // change todoList mode\n          // todoList mode를 바꾼다. Not will Do and Will Do\n\n\n          if (_pressArrowDirection === 'ArrowLeft') {\n            let tempIdx = this.filterTodoCursorListCnt - 1 <= 0 ? 0 : this.filterTodoCursorListCnt - 1;\n            this.filterTodoCursorList[tempIdx + 1][this.currentTodoSelector].todoState = \"NotWillDo\";\n            this.filterTodoCursorList[tempIdx].push(this.filterTodoCursorList[tempIdx + 1][this.currentTodoSelector]);\n\n            for (var i = this.currentMemoSelector; i < this.filterTodoCursorList[tempIdx + 1].length - 1; i++) {\n              this.filterTodoCursorList[tempIdx + 1][i] = this.filterTodoCursorList[tempIdx + 1][i + 1];\n            }\n\n            this.filterTodoCursorList[tempIdx + 1] = this.filterTodoCursorList[tempIdx + 1].slice(0, this.filterTodoCursorList[tempIdx].length - 1);\n          } else if (_pressArrowDirection === 'ArrowRight') {\n            let tempIdx = this.filterTodoCursorListCnt + 1 >= 2 ? 2 : this.filterTodoCursorListCnt + 1;\n            this.filterTodoCursorList[tempIdx - 1][this.currentTodoSelector].todoState = \"willDo\";\n            this.filterTodoCursorList[tempIdx].push(this.filterTodoCursorList[tempIdx - 1][this.currentTodoSelector]);\n          }\n\n          console.log(this.filterTodoCursorList[0]);\n          console.log(this.filterTodoCursorList[1]);\n          console.log(this.filterTodoCursorList[2]);\n        } // 메모의 상태를 변경하기 위해서 사용\n\n\n        if (this.actionMode === 'selectorMode' && e.key === '/') {\n          if (this.writeContentMode === 'todoList') {\n            this.writeContentMode = 'memoList';\n            this.currentMemoSelector = 0;\n          } else {\n            this.writeContentMode = 'todoList';\n            this.currentMemoSelector = -1;\n          }\n\n          e.target.value = \"\";\n          this.forceUpdate();\n        } // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        // filterTodo 상태에서 이동제어\n        // 이동에 관한 것\n        // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n        if (37 <= e.keyCode && e.keyCode <= 40) {\n          var _pressArrowDirection = e.key;\n\n          if (this.actionMode === 'selectorMode' && this.writeContentMode === 'memoList') {\n            //controll memo mode\n            let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = nowMemolist.length - 1 === this.currentMemoSelector ? nowMemolist.length - 1 : this.currentMemoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (nowMemolist.length !== 0) {\n                this.currentMemoSelector = this.currentMemoSelector === 0 ? 0 : this.currentMemoSelector - 1;\n              }\n            }\n          } else {\n            //controll todo mode\n            if (_pressArrowDirection === 'ArrowDown') {\n              if (this.actionMode === 'writeMode' && this.props._contents.length !== 0) {\n                this.currentTodoSelector = 0;\n                this.actionMode = 'selectorMode';\n              } else if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === this.props._contents.length - 1 ? this.props._contents.length - 1 : this.currentTodoSelector + 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowUp') {\n              if (this.actionMode === 'selectorMode') {\n                this.currentTodoSelector = this.currentTodoSelector === 0 ? 0 : this.currentTodoSelector - 1;\n              }\n            } else if (_pressArrowDirection === 'ArrowLeft') {\n              this.filterTodoCursorListCnt = this.filterTodoCursorListCnt == 0 ? 0 : this.filterTodoCursorListCnt - 1;\n              console.log(\"filter enter Arrow left\");\n            } else if (_pressArrowDirection === 'ArrowRight') {\n              console.log(\"filter enter Arrow Right\");\n              this.filterTodoCursorListCnt = this.filterTodoCursorListCnt == 2 ? 2 : this.filterTodoCursorListCnt + 1;\n            }\n          }\n\n          this.forceUpdate();\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterTodo\",\n      children: /*#__PURE__*/_jsxDEV(RenderTodoMemoDiveFilter, {\n        _contents: this.props._contents,\n        _mode: this.actionMode,\n        _currentTodoSelector: this.currentTodoSelector,\n        _currentMemoSelector: this.currentMemoSelector,\n        _writeContentMode: this.writeContentMode,\n        _filterTodoCursorListCnt: this.filterTodoCursorListCnt,\n        _filterTodoInnerCursor: this.filterTodoInnerCursor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RenderTodoList;","map":{"version":3,"sources":["/Users/jonggeun/Desktop/anfree/anfreeFront/anfree/src/TodoList/ControllerFilterTodoList.js"],"names":["render","React","Component","memo","RenderTodoMemoDiveFilter","RenderTodoList","constructor","props","actionMode","currentTodoSelector","currentMemoSelector","readyList","_contents","willNotDoList","willDoList","filterTodoCursorList","filterTodoCursorListCnt","state","pressArrowDirection","swapTodoContents","UpDown","upDownInt","updateContentsList","Array","from","temp","updateContentsTodoList","swapMemoContents","memoIdx","todoIdx","memolist","componentDidMount","window","addEventListener","e","_stage","shiftKey","keyCode","_pressArrowDirection","key","writeContentMode","memolength","length","tempIdx","todoState","push","i","slice","console","log","target","value","forceUpdate","nowMemolist","filterTodoInnerCursor"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, {Component, memo} from \"react\";\nimport RenderTodoMemoDiveFilter from \"./RenderTodoMemoDiveFilter\";\n\n// mode, contents\nclass RenderTodoList extends Component{\n    constructor(props){\n        super(props);\n        //actionMode : writeMode, selectorMode,\n        this.actionMode = 'selectorMode';\n        this.currentTodoSelector = 0;\n        this.currentMemoSelector = -1;\n\n        this.readyList = this.props._contents;\n        this.willNotDoList = [];\n        this.willDoList =[];\n\n        // filterTodo cursor\n        this.filterTodoCursorList =[this.willNotDoList,this.readyList,this.willDoList];   \n        this.filterTodoCursorListCnt =1;     \n        this.state={\n            pressArrowDirection : ''\n        }\n    }\n    //다시\n    swapTodoContents(UpDown){\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[this.currentTodoSelector];\n        updateContentsList[this.currentTodoSelector] = updateContentsList[this.currentTodoSelector+upDownInt];\n        updateContentsList[this.currentTodoSelector+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n    //다시\n    swapMemoContents(UpDown){\n        let memoIdx = this.currentMemoSelector;\n        let todoIdx = this.currentTodoSelector;\n        var upDownInt = (UpDown === 'up')? -1 :1;\n        var updateContentsList = Array.from(this.props._contents);\n        var temp = updateContentsList[todoIdx].memolist[memoIdx];\n        updateContentsList[todoIdx].memolist[memoIdx] = updateContentsList[todoIdx].memolist[memoIdx + upDownInt];\n        updateContentsList[todoIdx].memolist[memoIdx+upDownInt] = temp;\n        this.props.updateContentsTodoList(updateContentsList);\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown',(e)=>{\n            if(this.props._stage === 'FilterTodo'){\n                // 위치변경 로직\n                if(e.shiftKey && 37<=e.keyCode && e.keyCode<=40 && this.actionMode === 'selectorMode'){\n                    var _pressArrowDirection = e.key;\n    \n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        let memolength = this.props._contents[this.currentTodoSelector].memolist.length;\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentMemoSelector!=memolength-1){\n                            this.swapMemoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentMemoSelector !=0){\n                            this.swapMemoContents('up');\n                        }\n                    }else{\n                        if(_pressArrowDirection === 'ArrowDown' && this.currentTodoSelector!=this.props._contents.length-1){\n                            this.swapTodoContents('down');\n                        }else if(_pressArrowDirection==='ArrowUp' && this.currentTodoSelector !=0){\n                            this.swapTodoContents('up');\n                        }\n                    }\n                    // change todoList mode\n                    // todoList mode를 바꾼다. Not will Do and Will Do\n                    if(_pressArrowDirection === 'ArrowLeft'){\n                        let tempIdx = (this.filterTodoCursorListCnt-1 <=0)? 0 : this.filterTodoCursorListCnt-1;\n                        this.filterTodoCursorList[tempIdx+1][this.currentTodoSelector].todoState = \"NotWillDo\";\n                        this.filterTodoCursorList[tempIdx].push(this.filterTodoCursorList[tempIdx+1][this.currentTodoSelector]);\n                        for(var i=this.currentMemoSelector; i<this.filterTodoCursorList[tempIdx+1].length-1; i++){\n                            this.filterTodoCursorList[tempIdx+1][i] = this.filterTodoCursorList[tempIdx+1][i+1]; \n                        }\n                        this.filterTodoCursorList[tempIdx+1] = this.filterTodoCursorList[tempIdx+1].slice(0,this.filterTodoCursorList[tempIdx].length-1);\n                    }else if(_pressArrowDirection === 'ArrowRight'){\n                        let tempIdx = (this.filterTodoCursorListCnt+1 >=2)? 2 : this.filterTodoCursorListCnt+1;\n                        this.filterTodoCursorList[tempIdx-1][this.currentTodoSelector].todoState = \"willDo\";\n                        this.filterTodoCursorList[tempIdx].push(this.filterTodoCursorList[tempIdx-1][this.currentTodoSelector]);  \n                    }\n                    console.log(this.filterTodoCursorList[0]);\n                    console.log(this.filterTodoCursorList[1]);\n                    console.log(this.filterTodoCursorList[2]);\n                }\n\n\n                // 메모의 상태를 변경하기 위해서 사용\n                if(this.actionMode === 'selectorMode' && e.key === '/'){\n                    if(this.writeContentMode === 'todoList') {\n                        this.writeContentMode = 'memoList';\n                        this.currentMemoSelector = 0;\n                    }\n                    else {\n                        this.writeContentMode = 'todoList';\n                        this.currentMemoSelector = -1;\n                    }\n                    e.target.value = \"\";\n                    this.forceUpdate();\n                }\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                // filterTodo 상태에서 이동제어\n                // 이동에 관한 것\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n                if(37<=e.keyCode && e.keyCode<=40){\n                    var _pressArrowDirection = e.key;\n                    if(this.actionMode==='selectorMode' && this.writeContentMode==='memoList'){\n                        //controll memo mode\n                        let nowMemolist = this.props._contents[this.currentTodoSelector].memolist;\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            \n                            if(nowMemolist.length !== 0){\n                                this.currentMemoSelector = (nowMemolist.length-1 === this.currentMemoSelector) ? nowMemolist.length-1: this.currentMemoSelector+1;    \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(nowMemolist.length!==0){\n                                this.currentMemoSelector = (this.currentMemoSelector === 0)? 0 : this.currentMemoSelector-1;\n                            }\n                        }\n                    }else{\n                        //controll todo mode\n                        if(_pressArrowDirection === 'ArrowDown'){\n                            if(this.actionMode==='writeMode' && this.props._contents.length!==0){\n                                this.currentTodoSelector = 0;\n                                this.actionMode = 'selectorMode'\n                            }else if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === this.props._contents.length-1)? this.props._contents.length-1 : this.currentTodoSelector+1;                        \n                            }\n                        }else if(_pressArrowDirection === 'ArrowUp'){\n                            if(this.actionMode === 'selectorMode'){\n                                this.currentTodoSelector = (this.currentTodoSelector === 0)? 0 : this.currentTodoSelector-1;\n                            }\n                        }else if(_pressArrowDirection === 'ArrowLeft'){\n                            this.filterTodoCursorListCnt = (this.filterTodoCursorListCnt == 0) ? 0 : this.filterTodoCursorListCnt-1;\n                            console.log(\"filter enter Arrow left\")\n                        }else if(_pressArrowDirection === 'ArrowRight'){\n                            console.log(\"filter enter Arrow Right\")\n                            this.filterTodoCursorListCnt = (this.filterTodoCursorListCnt == 2) ? 2 : this.filterTodoCursorListCnt+1;\n                        }\n                    }\n                    this.forceUpdate();\n                }\n            }\n            \n            \n        })\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"FilterTodo\">\n            <RenderTodoMemoDiveFilter\n            _contents={this.props._contents}\n            _mode = {this.actionMode}\n            _currentTodoSelector = {this.currentTodoSelector}\n            _currentMemoSelector = {this.currentMemoSelector}\n            _writeContentMode = {this.writeContentMode}\n            _filterTodoCursorListCnt = {this.filterTodoCursorListCnt}\n            _filterTodoInnerCursor = {this.filterTodoInnerCursor}\n            ></RenderTodoMemoDiveFilter>\n            </div>\n        )\n    }\n}\n\nexport default RenderTodoList;"]},"metadata":{},"sourceType":"module"}